{
    "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/3a361e0bc07860055a926e0d41df405c6f0eb3d4/Documents/CommitteeSpecifications/2.1.0/sarif-schema-2.1.0.json",
    "version": "2.1.0",
    "runs": [
        {
            "tool": {
                "driver": {
                    "name": "appScreener",
                    "organization": "Solar appScreener",
                    "product": "appScreener",
                    "fullName": "Solar appScreener",
                    "version": "3.14.5",
                    "notifications": [],
                    "rules": [
                        {
                            "id": "PYTHON_PATH_MANIPULATION",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Path manipulation",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>Using data from an untrusted source when working with the file system may give an attacker access to important system files.</p>\n\n<p>By manipulating variables that reference files with &ldquo;dot-dot-slash (../)&rdquo; sequences and its variations or by using absolute file paths, it may be possible to access arbitrary files and directories stored on file system including application source code or configuration and critical system files.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Create a white list of acceptable names from which the user can choose. Do not use values entered by the user without validation.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_INJECTION_COMMAND",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Command injection",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>Executing commands obtained from data from an untrusted source is insecure.</p>\n\n<p>Injection vulnerabilities take the first place in the &ldquo;OWASP Top 10 2017&rdquo; web-application vulnerabilities ranking. Command injection vulnerabilities are divided into two categories:</p>\n\n<ol>\n<li>An attacker modifies the command itself;</li>\n<li>An attacker replaces the value of the environment variables, which implicitly changes the semantics of the command being executed.</li>\n</ol>\n\n<p>In the given case, the application is prone to the vulnerability of the first type.</p>\n\n<p>A possible attack scenario:</p>\n\n<ol>\n<li>The application receives input data from an untrusted source, for example, user input.</li>\n<li>The data obtained is used as a part of the string that defines the command.</li>\n<li>Execution of the command gives an attacker the privileges which he did not previously possess.</li>\n</ol>\n\n<p>A lot of the time, code uses <code>shell=True</code> because it&rsquo;s convenient. The shell provides the ability to pipe things around without buffering them in memory, and allows a malicious user to chain</p>\n\n<ol>\n<li>additional commands after a legitimate command is run.</li>\n<li>There are a lot of functions that uses curl to grab a page from a website. The functions is insecure because it uses <code>shell=True</code>, which allows shell injection. A user to who instructs your code to fetch the website ; rm -rf / can do terrible things to what used to be your machine.</li>\n<li>If we convert the function to use <code>shell=False</code>, it doesn&rsquo;t work. This does not fix the issue, rather it causes it to be more broken than before.</li>\n<li>The following modules and functions are the most common for shell injections: <code>['subprocess.Popen', 'subprocess.call', 'subprocess.check_call', 'subprocess.check_output', 'subprocess.run', 'os.system', 'os.popen', 'os.popen2', 'os.popen3', 'os.popen4', 'popen2.popen2', 'popen2.popen3', 'popen2.popen4', 'popen2.Popen3', 'popen2.Popen4']</code></li>\n<li>When a command is executed with the <code>shell = True</code> parameter, it is executed through the shell. The program is interpreted in accordance with the syntax and semantic rules of the called shell. In this case, the user must follow these rules. Thus, the user can execute the programs being listened to.</li>\n</ol>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Do not allow users to directly control the commands executed by an application. If the behavior of the application should be dependent on the user input, suggest the user to choose from a specific list of legitimate commands.</li>\n<li>If user data is a command argument, the whitelist may be too cumbersome. Blacklist is also inefficient, as it is difficult to maintain it up to date and comprehensive. In this case, it is recommended to use the whitelist of characters allowed in the command parameters.</li>\n<li>An attacker can change the semantics of the command not only by changing it, but also by affecting its environment. Environment must not be considered a trusted source. The values of environment variables must also be validated.</li>\n<li>If the command gets as an argument <code>shell</code>, then assign it a value <code>False</code> .</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "CONFIG_HTTP_USAGE",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "HTTP usage",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>Using HTTP rather than HTTPS allows &ldquo;the man in the middle&rdquo; attack. This can lead to a complete confidentiality loss of the transferred data.</p>\n\n<p>Using HTTPS, which is based on HTTP and SSL / TLS, helps to protect the transferred data against unauthorized access and modification. It is recommended to use HTTPS for all cases of data transfer between the client and the server, in particular, for the login page and all pages that require authentication.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Use only secure protocols (e.g., HTTPS) for the confidential data transfer between the client and the server.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_ASSERT_USAGE",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Assert usage",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>The application uses the assert method. Assert is a convenient way to insert debug statements in a program. It was discovered that some projects used assert to enforce interface constraints. However, assert is removed with compiling to optimised byte code (python -o producing \\*.pyo files).</p>\n\n<p>This caused various protections to be removed. The use of assert is also considered as general bad practice in OpenStack codebases.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Try not to use assert.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_INJECTION_RESOURCE",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Resource injection",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>An attacker can gain access to reading and changing protected system resources of the application has the ability to change the resource identifier.</p>\n\n<p>Resource injection occurs when an atacker can specify identifier that will be used to access the system resource (for example, the port number to connect to the network resource). This allows him, in particular, to transfer valuable data to thied-party server.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Create a whitelist of valid resource IDs and allow a user to select from this list and not to set his/her own value.</li>\n<li>If maintaining a whitelist is too difficult because of the large number of valid IDs, create a whitelist of characters allowed in identifiers. Blacklist in this case is ineffective, as it is likely to initially be incomplete, or sooner or later cease to be relevant.</li>\n<li>If nonetheless blacklist is chosen as a validation mechanism, make sure that it takes into account all the possible encodings and special character values (different for different operating systems). Changing the list should be simple when changing the requirements for validation.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_DOS_REGEX",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "DOS attack via regular expressions possible",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>The regexp used is unreliable, which can be computationally intensive for some inputs. Regular expression denial of service (ReDOS) attack is possible.</p>\n\n<p>Regular expressions are widely used in applications to validate the user-supplied data. Expressions containing structures like <code>(( )+)+</code> cause execution of a significant amount of iterations. By inputting a certain type of string an attacker can disrupt the application operation. All implementations of regular expressions have such vulnerabilities.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Do not use the data that is obtained from an untrusted source has not passed validation in regular expressions.</li>\n<li>Avoid regular expressions containing nested groups of repeating characters.</li>\n<li>Check the regular expression for the possibility of ReDOS attack using safeRegex.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_ERROR_HANDLING_EMPTY_CATCH",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Error handling: empty catch block",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>The application contains an empty catch block, i.e. it catches an exception but does not handle it.</p>\n\n<p>Exception catch without its handling makes it more difficult to diagnose an error and correct it.</p>\n\n<p>Ignoring exceptions and other error conditions may allow an attacker to induce unexpected behavior unnoticed.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>When catching an exception, at least write to the log information that it happened. This will help to identify the cause of the error. It is also preferable to interrupt the current operation.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_BAD_FUNCTION",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Obsolete or unsafe function",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>The function used is deprecated or unsafe (regardless of how it is used). It is recommended to replace it with a secure analog.</p>\n\n<p>The <code>smtplib</code> library in CPython (aka Python) before 2.7.12, 3.x to 3.4.5, and 3.5.x to 3.5.2 does not return an error if the <code>SMTP.starttls()</code>, which can allow &ldquo;man-in-the-middle&rdquo; attacks to bypass the protection of TLS. I.e., using the network location between the client and the registry, block the <code>StartTLS</code> command.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Replace deprecated and unsafe functions with their secure analogs.</li>\n<li>Watch for updates and fixes in libraries.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_LOGGING_SYSTEM_OUTPUT",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Logging into system output",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>The application uses unstructured logging (error messages are outputted to standard <code>out</code> or <code>err</code>). Instead, it is recommended to use a structured logging.</p>\n\n<p>Structured logging using specially designed structures can generate a log with the levels, time stamps, standard formatting. Using standard streams to output error messages while there is a mechanism of structured logging in a program can lead to absence of critical information in the log.</p>\n\n<p>Outputting error messages to standard streams is only permissible on the early stages of development.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Use module <code>logging</code> for logging.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_INFORMATION_LEAK",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Information leak",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>System configuration information leak is possible. This can help an attacker to create a plan of an attack.</p>\n\n<p>Debug information and error messages can be written to the log, displayed to the console, or sent to the user depending on the system settings. In some cases, an attacker can make a conclusion about the system vulnerabilities from the error message. For example, a database error can indicate insecurity against SQL injection attacks. Information about the version of the operating system, server applications and system configurations can also be of value to the attacker.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>Exclude detailed information about the system and its configuration from the error messages.</li>\n</ul>"
                            },
                            "relationships": []
                        },
                        {
                            "id": "PYTHON_FILE_SEPARATOR_HARDCODED",
                            "deprecatedIds": [],
                            "deprecatedGuids": [],
                            "name": "Platform-specific file separator",
                            "deprecatedNames": [],
                            "fullDescription": {
                                "markdown": "<p>Using hardcoded file separator leads to problems with application portability.</p>\n\n<p>Different operating systems use different file separators. For example, Windows uses &ldquo;\\&rdquo;, whereas UNIX-like operating system use &ldquo;/&rdquo;. If you intend to run the application on different platforms, the hardcoded file separator can change the application logic or cause a denial of service.</p>"
                            },
                            "help": {
                                "markdown": "<ul>\n<li>To determine the separator files, use platform-independent API methods.</li>\n</ul>"
                            },
                            "relationships": []
                        }
                    ],
                    "taxa": [],
                    "locations": [],
                    "language": "en-US",
                    "contents": [
                        "localizedData",
                        "nonLocalizedData"
                    ],
                    "isComprehensive": false,
                    "supportedTaxonomies": []
                },
                "extensions": []
            },
            "invocations": [],
            "language": "en-US",
            "versionControlProvenance": [],
            "artifacts": [],
            "logicalLocations": [],
            "graphs": [],
            "results": [
                {
                    "ruleId": "PYTHON_INJECTION_RESOURCE",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Resource injection",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 989,
                                    "startColumn": 12,
                                    "endLine": 989,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 989,
                                        "lineEnd": 989,
                                        "columnStart": 12,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 421,
                                    "startColumn": 11,
                                    "endLine": 421,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 421,
                                        "lineEnd": 421,
                                        "columnStart": 11,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 397,
                                    "startColumn": 13,
                                    "endLine": 397,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    found = False\n    for p in ['tcp', 'udp', 'tcp', 'tcp6']:\n        path = os.path.join(\"/proc/net\", p)\n        if not os.path.exists(p):\n            continue\n        with open(p) as f:\n            if len(f.readlines()) > 1:  # account for header\n                found = True\n                break\n    return found"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 993,
                                    "startColumn": 12,
                                    "endLine": 993,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 993,
                                        "lineEnd": 993,
                                        "columnStart": 12,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 631,
                                    "startColumn": 12,
                                    "endLine": 631,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns, update=False)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['origname'])\n        tests.unit.support.check_for_exception(self, OSError,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 653,
                                    "startColumn": 13,
                                    "endLine": 653,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        # Installation defaults are tested elsewhere\n\n        f = self.backend.files['defaults']\n        contents = \"\"\n        fd = open(f, 'r')\n        for line in fd.readlines():\n            if re.search(\"^DEFAULT_INPUT_POLICY=\", line):\n                line = \"#\" + line\n            contents += line\n        fd.close()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 642,
                                    "startColumn": 12,
                                    "endLine": 642,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                                               ufw.util.close_files,\n                                               fns, True)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['tmpname'])\n        tests.unit.support.check_for_exception(self, OSError,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 58,
                                    "startColumn": 13,
                                    "endLine": 58,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                                        os.environ['PATH'])\n\n        # update ufw-init-functions to use our fake iptables* commands\n        f = os.path.join(ufw.common.state_dir, \"ufw-init-functions\")\n        contents = \"\"\n        fd = open(f, 'r')\n        for line in fd.readlines():\n            if re.search(\"^PATH=\", line):\n                line = \"#\" + line\n                line += 'PATH=\"%s:%s\"\\n' % (ufw.common.iptables_dir,\n                                            line.split('\"')[1])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 449,
                                    "startColumn": 14,
                                    "endLine": 449,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 449,
                                        "lineEnd": 449,
                                        "columnStart": 14,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 855,
                                    "startColumn": 20,
                                    "endLine": 855,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 855,
                                        "lineEnd": 855,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 671,
                                    "startColumn": 13,
                                    "endLine": 671,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                              ufw.common.UFWError,\n                              self.backend._get_defaults)\n\n        f = self.backend.files['defaults']\n        contents = \"\"\n        fd = open(f, 'r')\n        for line in fd.readlines():\n            if re.search(\"^#DEFAULT_INPUT_POLICY=\", line):\n                line = \"DEFAULT_INPUT_POLICY=bad\" + line\n            contents += line\n        fd.close()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 897,
                                    "startColumn": 20,
                                    "endLine": 897,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 897,
                                        "lineEnd": 897,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 589,
                                    "startColumn": 12,
                                    "endLine": 589,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        tests.unit.support.check_for_exception(self, OSError, \\\n                    ufw.util.write_to_file, None, 'foo')\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.write_to_file(fns['tmp'], \"\")\n        ufw.util.write_to_file(fns['tmp'], \"test\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 223,
                                    "startColumn": 11,
                                    "endLine": 223,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return (addr, changed)\n\n\ndef open_file_read(fn):\n    '''Opens the specified file read-only'''\n    return open(fn, 'r')\n\n\ndef open_files(fn):\n    '''Opens the specified file read-only and a tempfile read-write.'''\n    orig = open_file_read(fn)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 449,
                                    "startColumn": 14,
                                    "endLine": 449,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 449,
                                        "lineEnd": 449,
                                        "columnStart": 14,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 907,
                                    "startColumn": 20,
                                    "endLine": 907,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 907,
                                        "lineEnd": 907,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 223,
                                    "startColumn": 11,
                                    "endLine": 223,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return (addr, changed)\n\n\ndef open_file_read(fn):\n    '''Opens the specified file read-only'''\n    return open(fn, 'r')\n\n\ndef open_files(fn):\n    '''Opens the specified file read-only and a tempfile read-write.'''\n    orig = open_file_read(fn)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1104,
                                    "startColumn": 15,
                                    "endLine": 1104,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef create_lock(lockfile='/run/ufw.lock', dryrun=False):\n    '''Create a blocking lockfile'''\n    lock = None\n    if not dryrun:\n        lock = open(lockfile, 'w')\n        fcntl.lockf(lock, fcntl.LOCK_EX)\n    return lock\n\n\ndef release_lock(lock):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 893,
                                    "startColumn": 20,
                                    "endLine": 893,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 893,
                                        "lineEnd": 893,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 223,
                                    "startColumn": 11,
                                    "endLine": 223,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return (addr, changed)\n\n\ndef open_file_read(fn):\n    '''Opens the specified file read-only'''\n    return open(fn, 'r')\n\n\ndef open_files(fn):\n    '''Opens the specified file read-only and a tempfile read-write.'''\n    orig = open_file_read(fn)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 571,
                                    "startColumn": 12,
                                    "endLine": 571,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    def test_open_files(self):\n        '''Test open_files()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        tests.unit.support.check_for_exception(self, IOError, \\\n                    ufw.util.open_files, tmp + 'nonexistent')\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 421,
                                    "startColumn": 11,
                                    "endLine": 421,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 421,
                                        "lineEnd": 421,
                                        "columnStart": 11,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 893,
                                    "startColumn": 20,
                                    "endLine": 893,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 893,
                                        "lineEnd": 893,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "        raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n    matched = \"\"\n    # we may not have an IPv6 address, so no coverage\n    if v6: # pragma: no cover\n        for line in open(proc).readlines():\n            tmp = line.split()\n            ifname = tmp[5].strip()\n\n            tmp_addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1108,
                                    "startColumn": 15,
                                    "endLine": 1108,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef create_lock(lockfile='/run/ufw.lock', dryrun=False):\n    '''Create a blocking lockfile'''\n    lock = None\n    if not dryrun:\n        lock = open(lockfile, 'w')\n        fcntl.lockf(lock, fcntl.LOCK_EX)\n    return lock\n\n\ndef release_lock(lock):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 911,
                                    "startColumn": 20,
                                    "endLine": 911,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 911,
                                        "lineEnd": 911,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 449,
                                    "startColumn": 14,
                                    "endLine": 449,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 449,
                                        "lineEnd": 449,
                                        "columnStart": 14,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:\n        exe = open(path).readlines()[0].split()[1]\n    except Exception: # pragma: no cover\n        err_msg = _(\"Could not find executable for '%s'\") % (path)\n        raise ValueError(err_msg)\n    debug(\"under_ssh: exe is '%s'\" % (exe))\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 907,
                                    "startColumn": 20,
                                    "endLine": 907,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 907,
                                        "lineEnd": 907,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "            if addr == tmp_addr or \\\n               ('/' in tmp_addr and in_network(addr, tmp_addr, True)):\n                matched = ifname\n                break\n    else:\n        for line in open(proc).readlines():\n            if ':' not in line:\n                continue\n            ifname = line.split(':')[0].strip()\n            # this can fail for certain devices, so just skip them\n            try:"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 558,
                                    "startColumn": 12,
                                    "endLine": 558,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    def test_open_file_read(self):\n        '''Test open_file_read()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        tests.unit.support.check_for_exception(self, IOError, \\\n                    ufw.util.open_file_read, tmp + 'nonexistent')\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 623,
                                    "startColumn": 12,
                                    "endLine": 623,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns, update=False)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 855,
                                    "startColumn": 20,
                                    "endLine": 855,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                        "lineStart": 855,
                                        "lineEnd": 855,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1104,
                                    "startColumn": 15,
                                    "endLine": 1104,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef create_lock(lockfile='/run/ufw.lock', dryrun=False):\n    '''Create a blocking lockfile'''\n    lock = None\n    if not dryrun:\n        lock = open(lockfile, 'w')\n        fcntl.lockf(lock, fcntl.LOCK_EX)\n    return lock\n\n\ndef release_lock(lock):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 859,
                                    "startColumn": 20,
                                    "endLine": 859,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 859,
                                        "lineEnd": 859,
                                        "columnStart": 20,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if v6: # pragma: no cover\n        proc = '/proc/net/if_inet6'\n        if not os.path.exists(proc):\n            raise OSError(errno.ENOENT, \"'%s' does not exist\" % proc)\n\n        for line in open(proc).readlines():\n            tmp = line.split()\n            if ifname == tmp[5]:\n                addr = \":\".join( \\\n                           [tmp[0][i:i+4] for i in range(0, len(tmp[0]), 4)])\n"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 989,
                                    "startColumn": 12,
                                    "endLine": 989,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                        "lineStart": 989,
                                        "lineEnd": 989,
                                        "columnStart": 12,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()\n    for line in lines:\n        fields = line.split()\n        if not skipped_first:\n            skipped_first = True\n            continue"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 421,
                                    "startColumn": 11,
                                    "endLine": 421,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/src/util.py",
                                        "lineStart": 421,
                                        "lineEnd": 421,
                                        "columnStart": 11,
                                        "columnEnd": null,
                                        "description": "open",
                                        "snippet": "    # LP: #1101304\n    # 9983 (cmd) S 923 ...\n    # 9983 (cmd with spaces) S 923 ...\n    # LP: #2015645\n    # 229 (cmd(withparen)) S 228 ...\n    ppid = open(name).readlines()[0].rsplit(\")\", 1)[1].split()[1]\n\n    return int(ppid)\n\n\ndef under_ssh(pid=os.getpid()):"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 615,
                                    "startColumn": 12,
                                    "endLine": 615,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    def test_close_files(self):\n        '''Test close_files()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 246,
                                    "startColumn": 13,
                                    "endLine": 246,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "[WWw]\ntitle=Duplicate Web Server\ndescription=Duplicate Web server\nports=80/tcp\n'''\n        fd = open(f, 'w')\n        fd.write(contents)\n        fd.close()\n        self.backend.profiles = ufw.applications.get_profiles(\n                                    self.backend.files['apps'])\n        tests.unit.support.check_for_exception(self,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_INJECTION_COMMAND",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Command injection",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 103,
                                    "startColumn": 20,
                                    "endLine": 106,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                                 f])\n\n                if fn == 'common.py' and 'UFW_SKIP_CHECKS' in os.environ and \\\n                   os.environ['UFW_SKIP_CHECKS'] != '':\n                    print(\"Updating do_checks\")\n                    subprocess.call([\"sed\",\n                                     \"-i\",\n                                     \"s%do_checks = True%do_checks = False%g\",\n                                     f])\n\n        # Now byte-compile everything\n        super(Install, self).run()\n\n        # Install script and data files"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 126,
                                    "startColumn": 8,
                                    "endLine": 129,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        for f in [ script, manpage, manpage_f ]:\n            self.mkpath(os.path.dirname(f))\n\n        # update the interpreter to that of the one the user specified for setup\n        print(\"Updating staging/ufw to use %s\" % (sys.executable))\n        subprocess.call([\"sed\",\n                         \"-i\",\n                         \"1s%^#.*python.*%#! /usr/bin/env \" + sys.executable + \"%g\",\n                         'staging/ufw'])\n        self.copy_file('staging/ufw', script)\n        self.copy_file('doc/ufw.8', manpage)\n        self.copy_file('doc/ufw-framework.8', manpage_f)\n\n        # Install state files and helper scripts"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 80,
                                    "startColumn": 16,
                                    "endLine": 83,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#CONFIG_PREFIX#%\" + real_confdir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                                 f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 216,
                                    "startColumn": 12,
                                    "endLine": 219,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#VERSION#%\" + ufw_version + \"%g\",\n                             f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 152,
                                    "startColumn": 12,
                                    "endLine": 152,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if self.root != None:\n            transdir = self.root + real_sharedir\n        i18ndir = os.path.join(transdir, 'messages')\n        self.mkpath(i18ndir)\n        if len(os.listdir('locales/mo')) == 0:\n            subprocess.call([\"make\", \"mo\"])\n        self.copy_tree('locales/mo', i18ndir)\n\n        # Install configuration files\n        confdir = real_confdir\n        if self.root != None:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 75,
                                    "startColumn": 16,
                                    "endLine": 78,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            for d in [os.path.join(self.build_lib, \"ufw\"), 'staging']:\n                f = os.path.join(d, fn)\n                if not os.path.exists(f):\n                    continue\n                print(\"Updating \" + f)\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#CONFIG_PREFIX#%\" + real_confdir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                                 f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 221,
                                    "startColumn": 12,
                                    "endLine": 224,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#VERSION#%\" + ufw_version + \"%g\",\n                             f])\n\n        # Install pristine copies of rules files\n        sharedir = real_sharedir\n        if self.root != None:\n            sharedir = self.root + real_sharedir"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 90,
                                    "startColumn": 16,
                                    "endLine": 93,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#IPTABLES_DIR#%\" + iptables_dir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#SHARE_DIR#%\" + real_sharedir + \"%g\",\n                                 f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 95,
                                    "startColumn": 16,
                                    "endLine": 98,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#IPTABLES_DIR#%\" + iptables_dir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#SHARE_DIR#%\" + real_sharedir + \"%g\",\n                                 f])\n\n                if fn == 'common.py' and 'UFW_SKIP_CHECKS' in os.environ and \\\n                   os.environ['UFW_SKIP_CHECKS'] != '':\n                    print(\"Updating do_checks\")\n                    subprocess.call([\"sed\","
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 206,
                                    "startColumn": 12,
                                    "endLine": 209,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                      before6_rules, after6_rules, script, \\\n                      manpage, manpage_f, sysctl, init_helper, \\\n                      init_helper_functions, init_before_hook, \\\n                      init_after_hook ]:\n            print(\"Updating \" + f)\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#CONFIG_PREFIX#%\" + real_confdir + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                             f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 211,
                                    "startColumn": 12,
                                    "endLine": 214,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#CONFIG_PREFIX#%\" + real_confdir + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                             f])\n\n            subprocess.call([\"sed\",\n                             \"-i\",\n                             \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                             f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 85,
                                    "startColumn": 16,
                                    "endLine": 88,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#STATE_PREFIX#%\" + real_statedir + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#PREFIX#%\" + real_prefix + \"%g\",\n                                 f])\n\n                subprocess.call([\"sed\",\n                                 \"-i\",\n                                 \"s%#IPTABLES_DIR#%\" + iptables_dir + \"%g\",\n                                 f])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_LOGGING_SYSTEM_OUTPUT",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Logging into system output",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 276,
                                    "startColumn": 8,
                                    "endLine": 276,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    print(\"ERROR: could not find required binary 'iptables'\", file=sys.stderr)\n    sys.exit(1)\n\nfor e in ['ip6tables', 'iptables-restore', 'ip6tables-restore']:\n    if not os.path.exists(os.path.join(iptables_dir, e)):\n        print(\"ERROR: could not find required binary '%s'\" % (e), file=sys.stderr)\n        sys.exit(1)\n\n(rc, out) = cmd([iptables_exe, '-V'])\nif rc != 0:\n    raise OSError(errno.ENOENT, \"Could not find version for '%s'\" % \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 286,
                                    "startColumn": 4,
                                    "endLine": 286,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    raise OSError(errno.ENOENT, \"Could not find version for '%s'\" % \\\n                  (iptables_exe))\nversion = re.sub('^v', '', re.split('\\s', str(out))[1])\nprint(\"Found '%s' version '%s'\" % (iptables_exe, version))\nif version < \"1.4\":\n    print(\"WARN: version '%s' has limited IPv6 support. See README for details.\" % (version), file=sys.stderr)\n\nsetup (name='ufw',\n      version=ufw_version,\n      description='front-end for Linux firewalling',\n      long_description='front-end for Linux firewalling',"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 239,
                                    "startColumn": 4,
                                    "endLine": 239,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                      user_rules, user6_rules ]:\n            self.copy_file(f, rulesdir)\n\nif sys.version_info[0] < 2 or \\\n   (sys.version_info[0] == 2 and sys.version_info[1] < 6):\n    print(\"ERROR: Need at least python 2.6\", file=sys.stderr)\n    sys.exit(1)\n\nif os.path.exists('staging'):\n    shutil.rmtree('staging')\nshutil.copytree('src', 'staging')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 271,
                                    "startColumn": 4,
                                    "endLine": 271,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if iptables_exe != \"\":\n            break\n\n\nif iptables_exe == '':\n    print(\"ERROR: could not find required binary 'iptables'\", file=sys.stderr)\n    sys.exit(1)\n\nfor e in ['ip6tables', 'iptables-restore', 'ip6tables-restore']:\n    if not os.path.exists(os.path.join(iptables_dir, e)):\n        print(\"ERROR: could not find required binary '%s'\" % (e), file=sys.stderr)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_INFORMATION_LEAK",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Information leak",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 718,
                                    "startColumn": 8,
                                    "endLine": 718,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            # TODO: verify output\n\n    def test_reset(self):\n        '''Test reset()'''\n        res = self.backend.reset()\n        print(res)\n\n        # we only have 1 second resolution on the backup, so sleep is needed\n        time.sleep(1)\n\n        self.backend.dryrun = False"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 725,
                                    "startColumn": 8,
                                    "endLine": 725,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # we only have 1 second resolution on the backup, so sleep is needed\n        time.sleep(1)\n\n        self.backend.dryrun = False\n        res = self.backend.reset()\n        print(res)\n        # TODO: verify output\n\n\ndef test_main(): # used by runner.py\n    tests.unit.support.run_unittest("
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/frontend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 554,
                                    "startColumn": 16,
                                    "endLine": 554,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                set_error = True\n                break\n\n            if r.updated:\n                warn_msg = _(\"Rule changed after normalization\")\n                warnings.warn(warn_msg)\n\n        if not set_error:\n            # Just return the last result if no error\n            res += tmp\n        elif len(rules) == 1:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/runner.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 55,
                                    "startColumn": 4,
                                    "endLine": 55,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def runtest(test):\n    '''Run test'''\n    pkg = __import__(\"tests.unit.\" + test, globals(), locals(), [])\n    unit_pkg = getattr(pkg, \"unit\")\n    mod = getattr(unit_pkg, test)\n    print(test)\n    mod.test_main()\n\n\nif __name__ == '__main__':\n    # Create the unittest symlink so imports work"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_DOS_REGEX",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "DOS attack via regular expressions possible",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 261,
                                    "startColumn": 23,
                                    "endLine": 261,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 357,
                                    "startColumn": 33,
                                    "endLine": 357,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac2.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 364,
                                    "startColumn": 33,
                                    "endLine": 364,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 387,
                                    "startColumn": 33,
                                    "endLine": 387,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac2.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 238,
                                    "startColumn": 23,
                                    "endLine": 238,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 277,
                                    "startColumn": 23,
                                    "endLine": 277,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 386,
                                    "startColumn": 33,
                                    "endLine": 386,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 387,
                                    "startColumn": 33,
                                    "endLine": 387,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 261,
                                    "startColumn": 23,
                                    "endLine": 261,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 260,
                                    "startColumn": 23,
                                    "endLine": 260,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 231,
                                    "startColumn": 23,
                                    "endLine": 231,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    (port, proto) = ufw.util.parse_port_proto(argv[1])\n                except ValueError as e:\n                    raise UFWError(e)\n\n                if not re.match('^\\d([0-9,:]*\\d+)*$', port):\n                    if ',' in port or ':' in port:\n                        err_msg = _(\"Port ranges must be numeric\")\n                        raise UFWError(err_msg)\n                    to_service = port\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 403,
                                    "startColumn": 33,
                                    "endLine": 403,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        if arg == \"app\":\n                            if loc == \"src\":\n                                rule.sapp = tmp\n                            else:\n                                rule.dapp = tmp\n                        elif not re.match('^\\d([0-9,:]*\\d+)*$', tmp):\n                            if ',' in tmp or ':' in tmp:\n                                err_msg = _(\"Port ranges must be numeric\")\n                                raise UFWError(err_msg)\n\n                            if loc == \"src\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_FILE_SEPARATOR_HARDCODED",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Platform-specific file separator",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 151,
                                    "startColumn": 15,
                                    "endLine": 151,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        transdir = real_sharedir\n        if self.root != None:\n            transdir = self.root + real_sharedir\n        i18ndir = os.path.join(transdir, 'messages')\n        self.mkpath(i18ndir)\n        if len(os.listdir('locales/mo')) == 0:\n            subprocess.call([\"make\", \"mo\"])\n        self.copy_tree('locales/mo', i18ndir)\n\n        # Install configuration files\n        confdir = real_confdir"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/runner.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 62,
                                    "startColumn": 8,
                                    "endLine": 62,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n\nif __name__ == '__main__':\n    # Create the unittest symlink so imports work\n    if not os.path.islink(\"./ufw\"):\n        os.symlink(\"./src\", \"./ufw\")\n\n    # Replace runner.py's directory from the search path, and add our own\n    # so we can properly namespace our modules\n    d = os.path.abspath(os.path.normpath(os.path.dirname(sys.argv[0])))\n    testdir = os.path.dirname(d)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 926,
                                    "startColumn": 17,
                                    "endLine": 926,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return matched\n\n\ndef _get_proc_inodes():\n    '''Get inodes of files in /proc'''\n    proc_files = os.listdir(\"/proc\")\n    proc_files.sort()\n    pat = re.compile(r'^[0-9]+$')\n    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 926,
                                    "startColumn": 17,
                                    "endLine": 926,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return matched\n\n\ndef _get_proc_inodes():\n    '''Get inodes of files in /proc'''\n    proc_files = os.listdir(\"/proc\")\n    proc_files.sort()\n    pat = re.compile(r'^[0-9]+$')\n    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 930,
                                    "startColumn": 17,
                                    "endLine": 930,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return matched\n\n\ndef _get_proc_inodes():\n    '''Get inodes of files in /proc'''\n    proc_files = os.listdir(\"/proc\")\n    proc_files.sort()\n    pat = re.compile(r'^[0-9]+$')\n    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/runner.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 107,
                                    "startColumn": 8,
                                    "endLine": 107,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                except KeyError:\n                    pass\n\n    # Cleanup our symlink\n    if os.path.islink(\"./ufw\"):\n        os.unlink(\"./ufw\")\n\n    print(\"\")\n    print(\"------------------\")\n    print(\"Unit tests summary\")\n    print(\"------------------\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_ERROR_HANDLING_EMPTY_CATCH",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Error handling: empty catch block",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 164,
                                    "startColumn": 4,
                                    "endLine": 164,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n\ndef check_for_exception(t, expectedException, func, *args):\n    try:\n        func(*args)\n    except expectedException:\n        pass\n    except Exception:\n        t.fail(\"Unexpected exception thrown for '%s%s:\\n%s\" % (str(func), str(args), sys.exc_info()[0]))\n    else:\n        t.fail('%s not thrown' % str(expectedException))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/applications.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 162,
                                    "startColumn": 4,
                                    "endLine": 162,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    # Don't allow integers (ports)\n    try:\n        int(name)\n        return False\n    except Exception:\n        pass\n\n    # Require first character be alpha, so we can avoid collisions with port\n    # numbers.\n    if re.match(r'^[a-zA-Z0-9][a-zA-Z0-9 _\\-\\.+]*$', name):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 365,
                                    "startColumn": 8,
                                    "endLine": 365,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def debug(out):\n    '''Print debug message'''\n    if DEBUGGING:\n        try:\n            _print(sys.stderr, 'DEBUG: %s\\n' % out)\n        except IOError: # pragma: no cover\n            pass\n\n\ndef word_wrap(text, width):\n    '''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 192,
                                    "startColumn": 8,
                                    "endLine": 192,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        net.append(orig)\n\n    if not v6 and len(net) == 2 and _valid_dotted_quads(net[1], v6):\n        try:\n            net[1] = _dotted_netmask_to_cidr(net[1], v6)\n        except Exception:\n            # Not valid cidr, so just use the dotted quads\n            pass\n\n    addr = net[0]\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 192,
                                    "startColumn": 8,
                                    "endLine": 192,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        net.append(orig)\n\n    if not v6 and len(net) == 2 and _valid_dotted_quads(net[1], v6):\n        try:\n            net[1] = _dotted_netmask_to_cidr(net[1], v6)\n        except Exception:\n            # Not valid cidr, so just use the dotted quads\n            pass\n\n    addr = net[0]\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 57,
                                    "startColumn": 4,
                                    "endLine": 57,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise\n\n    try:\n        socket.getservbyname(port, \"tcp\")\n        proto = \"tcp\"\n    except Exception:\n        pass\n\n    try:\n        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 331,
                                    "startColumn": 4,
                                    "endLine": 331,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef error(out, do_exit=True):\n    '''Print error message and exit'''\n    try:\n        _print(sys.stderr, 'ERROR: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n    if do_exit: # pragma: no cover\n        sys.exit(1)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 331,
                                    "startColumn": 4,
                                    "endLine": 331,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef error(out, do_exit=True):\n    '''Print error message and exit'''\n    try:\n        _print(sys.stderr, 'ERROR: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n    if do_exit: # pragma: no cover\n        sys.exit(1)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 356,
                                    "startColumn": 4,
                                    "endLine": 356,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        if newline:\n            _print(output, '%s\\n' % out)\n        else:\n            _print(output, '%s' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef debug(out):\n    '''Print debug message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 365,
                                    "startColumn": 8,
                                    "endLine": 365,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def debug(out):\n    '''Print debug message'''\n    if DEBUGGING:\n        try:\n            _print(sys.stderr, 'DEBUG: %s\\n' % out)\n        except IOError: # pragma: no cover\n            pass\n\n\ndef word_wrap(text, width):\n    '''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 66,
                                    "startColumn": 4,
                                    "endLine": 66,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":\n            proto = \"any\"\n        else:\n            proto = \"udp\"\n    except Exception:\n        pass\n\n    return proto\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 601,
                                    "startColumn": 16,
                                    "endLine": 601,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 66,
                                    "startColumn": 4,
                                    "endLine": 66,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":\n            proto = \"any\"\n        else:\n            proto = \"udp\"\n    except Exception:\n        pass\n\n    return proto\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac2.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 561,
                                    "startColumn": 16,
                                    "endLine": 561,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 342,
                                    "startColumn": 4,
                                    "endLine": 342,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef warn(out):\n    '''Print warning message'''\n    try:\n        _print(sys.stderr, 'WARN: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef msg(out, output=sys.stdout, newline=True):\n    '''Print message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 342,
                                    "startColumn": 4,
                                    "endLine": 342,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef warn(out):\n    '''Print warning message'''\n    try:\n        _print(sys.stderr, 'WARN: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef msg(out, output=sys.stdout, newline=True):\n    '''Print message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 192,
                                    "startColumn": 8,
                                    "endLine": 192,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        net.append(orig)\n\n    if not v6 and len(net) == 2 and _valid_dotted_quads(net[1], v6):\n        try:\n            net[1] = _dotted_netmask_to_cidr(net[1], v6)\n        except Exception:\n            # Not valid cidr, so just use the dotted quads\n            pass\n\n    addr = net[0]\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 356,
                                    "startColumn": 4,
                                    "endLine": 356,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        if newline:\n            _print(output, '%s\\n' % out)\n        else:\n            _print(output, '%s' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef debug(out):\n    '''Print debug message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 583,
                                    "startColumn": 16,
                                    "endLine": 583,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/runner.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 102,
                                    "startColumn": 16,
                                    "endLine": 102,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # cleanup\n        for m in list(sys.modules.keys()):\n            if m.startswith(\"tests.unit.\") and m != \"tests.unit.support\":\n                try:\n                    del sys.modules[m]\n                except KeyError:\n                    pass\n\n    # Cleanup our symlink\n    if os.path.islink(\"./ufw\"):\n        os.unlink(\"./ufw\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 943,
                                    "startColumn": 8,
                                    "endLine": 943,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 365,
                                    "startColumn": 8,
                                    "endLine": 365,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def debug(out):\n    '''Print debug message'''\n    if DEBUGGING:\n        try:\n            _print(sys.stderr, 'DEBUG: %s\\n' % out)\n        except IOError: # pragma: no cover\n            pass\n\n\ndef word_wrap(text, width):\n    '''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 248,
                                    "startColumn": 16,
                                    "endLine": 248,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                is_unpack_user = False\n                try:\n                    if pwd.getpwuid(statinfo.st_uid)[0] == click_user or \\\n                            pwd.getpwuid(statinfo.st_uid)[0] == snap_user:\n                        is_unpack_user = True\n                except KeyError:\n                    pass\n\n                if statinfo.st_uid != 0 and not is_unpack_user and \\\n                        path not in warned_owner:\n                    warn_msg = _(\"uid is %(uid)s but '%(path)s' is owned by \" \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 57,
                                    "startColumn": 4,
                                    "endLine": 57,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise\n\n    try:\n        socket.getservbyname(port, \"tcp\")\n        proto = \"tcp\"\n    except Exception:\n        pass\n\n    try:\n        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_skeleton.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 34,
                                    "startColumn": 8,
                                    "endLine": 34,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    def test_example(self):\n        '''Test example dummy test'''\n        import ufw.common\n        try:\n            raise ufw.common.UFWError(\"test\")\n        except ufw.common.UFWError:\n            pass\n\n\ndef test_main(): # used by runner.py\n    tests.unit.support.run_unittest("
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 57,
                                    "startColumn": 4,
                                    "endLine": 57,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise\n\n    try:\n        socket.getservbyname(port, \"tcp\")\n        proto = \"tcp\"\n    except Exception:\n        pass\n\n    try:\n        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/applications.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 114,
                                    "startColumn": 12,
                                    "endLine": 114,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            try:\n                ufw.util.get_services_proto(p)\n                warn_msg = _(\"Skipping '%s': also in /etc/services\") % (p)\n                warn(warn_msg)\n                continue\n            except Exception:\n                pass\n\n            skip = False\n            for key, value in cdict.items(p):\n                if len(key) > 64:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 594,
                                    "startColumn": 16,
                                    "endLine": 594,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 947,
                                    "startColumn": 8,
                                    "endLine": 947,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 943,
                                    "startColumn": 8,
                                    "endLine": 943,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 66,
                                    "startColumn": 4,
                                    "endLine": 66,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        socket.getservbyname(port, \"udp\")\n        if proto == \"tcp\":\n            proto = \"any\"\n        else:\n            proto = \"udp\"\n    except Exception:\n        pass\n\n    return proto\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1120,
                                    "startColumn": 4,
                                    "endLine": 1120,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if lock is None:\n        return\n    try:  # pragma: no cover\n        fcntl.lockf(lock, fcntl.LOCK_UN)\n        lock.close()\n    except ValueError:  # pragma: nocover\n        # If the lock is already closed, ignore the exception. This should\n        # never happen but let's guard against it in case something changes\n        pass"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 987,
                                    "startColumn": 8,
                                    "endLine": 987,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                 ufw.util.get_ip_from_if, \"nonexistent\", False)\n\n        # just run through the code, we may not have an IPv6 address\n        try:\n            ufw.util.get_ip_from_if(\"lo\", True)\n        except IOError:\n            pass\n\n    def test_get_if_from_ip(self):\n        '''Test get_if_from_ip()'''\n        if sys.version_info[0] >= 3:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 342,
                                    "startColumn": 4,
                                    "endLine": 342,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef warn(out):\n    '''Print warning message'''\n    try:\n        _print(sys.stderr, 'WARN: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef msg(out, output=sys.stdout, newline=True):\n    '''Print message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_applications.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 36,
                                    "startColumn": 8,
                                    "endLine": 36,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    def test_get_profiles(self):\n        '''Test get_profiles()'''\n        try:\n            ufw.applications.get_profiles(\"foo\")\n            self.assertFalse(True)\n        except ufw.common.UFWError:\n            pass\n\n        self.assertTrue('WWW' in self.profiles.keys(), \"Could not find 'WWW'\")\n        self.assertEquals(self.profiles['WWW']['ports'], \"80/tcp\")\n        self.assertEquals(self.profiles['WWW']['title'], \"Web Server\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 331,
                                    "startColumn": 4,
                                    "endLine": 331,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef error(out, do_exit=True):\n    '''Print error message and exit'''\n    try:\n        _print(sys.stderr, 'ERROR: %s\\n' % out)\n    except IOError: # pragma: no cover\n        pass\n\n    if do_exit: # pragma: no cover\n        sys.exit(1)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 617,
                                    "startColumn": 16,
                                    "endLine": 617,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1116,
                                    "startColumn": 4,
                                    "endLine": 1116,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if lock is None:\n        return\n    try:  # pragma: no cover\n        fcntl.lockf(lock, fcntl.LOCK_UN)\n        lock.close()\n    except ValueError:  # pragma: nocover\n        # If the lock is already closed, ignore the exception. This should\n        # never happen but let's guard against it in case something changes\n        pass"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 554,
                                    "startColumn": 16,
                                    "endLine": 554,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1116,
                                    "startColumn": 4,
                                    "endLine": 1116,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    if lock is None:\n        return\n    try:  # pragma: no cover\n        fcntl.lockf(lock, fcntl.LOCK_UN)\n        lock.close()\n    except ValueError:  # pragma: nocover\n        # If the lock is already closed, ignore the exception. This should\n        # never happen but let's guard against it in case something changes\n        pass"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 356,
                                    "startColumn": 4,
                                    "endLine": 356,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        if newline:\n            _print(output, '%s\\n' % out)\n        else:\n            _print(output, '%s' % out)\n    except IOError: # pragma: no cover\n        pass\n\n\ndef debug(out):\n    '''Print debug message'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1004,
                                    "startColumn": 8,
                                    "endLine": 1004,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                 ufw.util.get_if_from_ip, \"nonexistent\")\n\n        # just run through the code, we may not have an IPv6 address\n        try:\n            ufw.util.get_if_from_ip(\"::1\")\n        except IOError:\n            pass\n\n    def test__get_proc_inodes(self):\n        '''Test _get_proc_inodes()'''\n        inodes = ufw.util._get_proc_inodes()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "CONFIG_HTTP_USAGE",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "HTTP usage",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/destructive/bugs/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\n# Don't display tracebacks\nsed -i 's/problem running ufw-init\\\\n%s\" % out)/problem running ufw-init\")/' $TESTPATH/lib/python/ufw/backend_iptables.py"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/testlib.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\ncp tests/defaults/profiles/* $TESTPATH/etc/ufw/applications.d\n\nlet count=0\ndo_cmd() {"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/doc/ufw.8",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 243,
                                    "endLine": 243,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": ".PP\n\\fBufw\\fR supports connection rate limiting, which is useful for protecting\nagainst brute\\-force login attacks. When a limit rule is used, \\fBufw\\fR will\nnormally allow the connection but will deny connections if an IP address\nattempts to initiate 6 or more connections within 30 seconds. See\nhttp://www.debian\\-administration.org/articles/187 for details. Typical usage\nis:\n\n  ufw limit ssh/tcp\n\n.PP"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/debian/po/es.po",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 25,
                                    "endLine": 25,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#     especialmente las notas de traducción en\n#     http://www.debian.org/intl/spanish/notas\n#\n#   - La guía de traducción de po's de debconf:\n#     /usr/share/doc/po-debconf/README-trans\n#     o http://www.debian.org/intl/l10n/po-debconf/README-trans\n#\nmsgid \"\"\nmsgstr \"\"\n\"Project-Id-Version: ufw 0.27.1-2\\n\"\n\"Report-Msgid-Bugs-To: ufw@packages.debian.org\\n\""
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/debug/test_boot.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n#    WARNING: this script is not for production use. It's intended use is\n#    for debugging.\n\nuser_and_host=\"$1\""
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/before.init",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 19,
                                    "endLine": 19,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\nset -e\n\ncase \"$1\" in\nstart)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/ipv6/rules6/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\necho \"Man page\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/bad/args/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"TESTING ARGS (logging)\" >> $TESTTMP/result\ndo_cmd \"1\" null --dry-run logging"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/installation/check_help/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\ndo_cmd \"0\" help\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/root/valid/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"TESTING ARGS (logging)\" >> $TESTTMP/result\ndo_cmd \"0\"  logging on"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/ipv6/bad_args6/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\necho \"TESTING ARGS (logging)\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/netmasks/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#set -x\n\nsource \"$TESTPATH/../testlib.sh\"\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-man-for-mac.patch/doc/ufw.8",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 243,
                                    "endLine": 243,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": ".PP\n\\fBufw\\fR supports connection rate limiting, which is useful for protecting\nagainst brute\\-force login attacks. When a limit rule is used, \\fBufw\\fR will\nnormally allow the connection but will deny connections if an IP address\nattempts to initiate 6 or more connections within 30 seconds. See\nhttp://www.debian\\-administration.org/articles/187 for details. Typical usage\nis:\n\n  ufw limit ssh/tcp\n\n.PP"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/apps/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"TESTING APPLICATION INTEGRATION (args)\" >> $TESTTMP/result\ndo_cmd \"0\" app list"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/ipv6/good_args6/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\necho \"TESTING ARGS (logging)\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/snap-files/ufw.completer.bash",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 14,
                                    "endLine": 14,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n# Based on work by Didier Roche <didrocks@ubuntu.com>\n#\n\n_ufw_commands()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/root/requirements/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\ndo_extcmd \"0\" null ./tests/check-requirements -f\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/after.init",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 19,
                                    "endLine": 19,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\nset -e\n\ncase \"$1\" in\nstart)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/run_tests.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport LANG=C\n\ntestdir=\"tests\"\ntests=\"unit installation bad bugs good util\""
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/ipv6/rules64/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\necho \"Man page\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/root/valid6/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\n# This isn't available everywhere, so we will test it later"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/bugs/misc/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"Bug #319226\" >> $TESTTMP/result\nmkdir $TESTPATH/etc/ufw/applications.d/.svn"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/doc/skel-ui.example",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 17,
                                    "endLine": 17,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n\nimport ufw.frontend\nfrom ufw.common import UFWError\nfrom ufw.util import error, warn"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/args/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"TESTING ARGS (logging)\" >> $TESTTMP/result\ndo_cmd \"0\" --dry-run logging on"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/debug/wrap_command.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n#\n#    WARNING: this script is not for production use. It's intended use is\n#    for debugging.\n\nset -e"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/root/normalization/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\ndo_cmd \"0\" nostats enable\necho \"TESTING EQUIVALENT PORTS\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/bad/apps/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\ncp $TESTPATH/../defaults/profiles.bad/* $TESTPATH/etc/ufw/applications.d\n\necho \"TESTING BAD PROFILE (command name)\" >> $TESTTMP/result"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/debian/po/es.po",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 21,
                                    "endLine": 21,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "# los siguientes documentos:\n#\n#   - El proyecto de traducción de Debian al español\n#     http://www.debian.org/intl/spanish/\n#     especialmente las notas de traducción en\n#     http://www.debian.org/intl/spanish/notas\n#\n#   - La guía de traducción de po's de debconf:\n#     /usr/share/doc/po-debconf/README-trans\n#     o http://www.debian.org/intl/l10n/po-debconf/README-trans\n#"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/logging/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#set -x\n\nsource \"$TESTPATH/../testlib.sh\"\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/bad/netmasks/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#set -x\n\nsource \"$TESTPATH/../testlib.sh\"\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/route/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"Man page\" >> $TESTTMP/result\ndo_cmd \"0\" --dry-run route deny proto udp from 1.2.3.4 to any port 514"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/reports/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\nipt_version=`iptables -V | awk '{print $2}' | sed 's/^v//'`\nipt_major=`echo $ipt_version | cut -d '.' -f 1`"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/installation/check_root/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\ndo_cmd \"0\" --dry-run status\n\nexit 0"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/bugs/rules/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"Bug #237446\" >> $TESTTMP/result\ndo_cmd \"0\" --dry-run allow to 111.12.34.2/4"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/runtest_ex.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#set -x\n\nsource \"$TESTPATH/../testlib.sh\"\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/conf/sysctl.conf",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "# Don't log Martian Packets (impossible packets)\nnet/ipv4/conf/default/log_martians=0\nnet/ipv4/conf/all/log_martians=0\n\n# Change to '0' to disable TCP/IP SYN cookies. A value of '1' disables TCP\n# Window Scaling (http://lkml.org/lkml/2008/2/5/167).\n#net/ipv4/tcp_syncookies=1\n\n#net/ipv4/tcp_fin_timeout=30\n#net/ipv4/tcp_keepalive_intvl=1800\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/root/logging/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw\n\n# This isn't available everywhere, so we will test it later"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/debian/po/es.po",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 19,
                                    "endLine": 19,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#\n# Equipo de traducción al español, por favor, lean antes de traducir\n# los siguientes documentos:\n#\n#   - El proyecto de traducción de Debian al español\n#     http://www.debian.org/intl/spanish/\n#     especialmente las notas de traducción en\n#     http://www.debian.org/intl/spanish/notas\n#\n#   - La guía de traducción de po's de debconf:\n#     /usr/share/doc/po-debconf/README-trans"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/ipv6/logging/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#set -x\n\nsource \"$TESTPATH/../testlib.sh\"\nsed -i 's/IPV6=no/IPV6=yes/' $TESTPATH/etc/default/ufw"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/good/rules/runtest.sh",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 15,
                                    "endLine": 15,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "#    but WITHOUT ANY WARRANTY; without even the implied warranty of\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#    GNU General Public License for more details.\n#\n#    You should have received a copy of the GNU General Public License\n#    along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nsource \"$TESTPATH/../testlib.sh\"\n\necho \"Man page\" >> $TESTTMP/result\ndo_cmd \"0\" --dry-run allow 53"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_ASSERT_USAGE",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Assert usage",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 535,
                                    "startColumn": 0,
                                    "endLine": 597,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 582,
                                    "startColumn": 0,
                                    "endLine": 644,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac2.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 542,
                                    "startColumn": 0,
                                    "endLine": 604,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 598,
                                    "startColumn": 0,
                                    "endLine": 660,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 564,
                                    "startColumn": 0,
                                    "endLine": 626,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 575,
                                    "startColumn": 0,
                                    "endLine": 637,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        return res\n    get_command = staticmethod(get_command)\n\n\nclass UFWCommandRouteRule(UFWCommandRule):\n    '''Class for parsing ufw route rule commands'''\n    def __init__(self, command):\n        UFWCommandRule.__init__(self, command)\n        self.type = 'route'\n\n    def parse(self, argv):\n        assert(argv[0] == \"route\")\n\n        # 'ufw delete NUM' is the correct usage, not 'ufw route delete NUM'\n        if 'delete' in argv:\n            idx = argv.index('delete')\n            err_msg = \"\"\n            if len(argv) > idx:\n                try:\n                    # 'route delete NUM' is unsupported\n                    int(argv[idx + 1])\n                    err_msg = _(\"'route delete NUM' unsupported. Use 'delete NUM' instead.\")\n                    raise UFWError(err_msg)\n                except ValueError:\n                    # 'route delete RULE' is supported\n                    pass\n\n        # Let's use as much as UFWCommandRule.parse() as possible. The only\n        # difference with our rules is that argv[0] is 'route' and we support\n        # both 'in on <interface>' and 'out on <interface>' in our rules.\n        # Because UFWCommandRule.parse() expects that the interface clause is\n        # specified first, strip out the second clause and add it later\n        rule_argv = None\n        interface = None\n        strip = None\n\n        # eg: ['route', 'allow', 'in', 'on', 'eth0', 'out', 'on', 'eth1']\n        s = \" \".join(argv)\n        if \" in on \" in s and \" out on \" in s:\n            strip = \"out\"\n            if argv.index(\"in\") > argv.index(\"out\"):\n                strip = \"in\"\n            # Remove 2nd interface clause from argv and add it to the rule\n            # later. Because we searched for \" <strip> on \" in our joined\n            # string we are guaranteed to have argv[argv.index(<strip>) + 2]\n            # exist.\n            interface = argv[argv.index(strip) + 2]\n            rule_argv = argv[0:argv.index(strip)] + argv[argv.index(strip)+3:]\n        elif not re.search(r' (in|out) on ', s) and \\\n             not re.search(r' app (in|out) ', s) and \\\n             (\" in \" in s or \" out \" in s):\n            # Specifying a direction without an interface doesn't make any\n            # sense with route rules. application names could be 'in' or 'out'\n            # so don't artificially limit those names.\n            err_msg = _(\"Invalid interface clause for route rule\")\n            raise UFWError(err_msg)\n        else:\n            rule_argv = argv\n\n        rule_argv[0] = \"rule\"\n        r = UFWCommandRule.parse(self, rule_argv)\n        if 'rule' in r.data:\n            r.data['rule'].forward = True\n            if strip and interface:\n                r.data['rule'].set_interface(strip, interface)\n\n        return r\n\n\nclass UFWCommandApp(UFWCommand):\n    '''Class for parsing ufw application commands'''\n    def __init__(self, command):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 0
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_PATH_MANIPULATION",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "error",
                    "message": {
                        "text": "Path manipulation",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 230,
                                    "startColumn": 19,
                                    "endLine": 230,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        # Install pristine copies of rules files\n        sharedir = real_sharedir\n        if self.root != None:\n            sharedir = self.root + real_sharedir\n        rulesdir = os.path.join(sharedir, 'iptables')\n        self.mkpath(rulesdir)\n        for f in [ before_rules, after_rules, \\\n                      before6_rules, after6_rules, \\\n                      user_rules, user6_rules ]:\n            self.copy_file(f, rulesdir)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 116,
                                    "startColumn": 17,
                                    "endLine": 116,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Install script and data files\n        prefix = real_prefix\n        if self.root != None:\n            prefix = self.root + real_prefix\n\n        script = os.path.join(prefix, 'sbin', 'ufw')\n        manpage = os.path.join(prefix, 'share', 'man', 'man8', 'ufw.8')\n        manpage_f = os.path.join(prefix, 'share', 'man', 'man8', \\\n                                 'ufw-framework.8')\n\n        for f in [ script, manpage, manpage_f ]:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 614,
                                    "startColumn": 14,
                                    "endLine": 614,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        ufw.util.msg_output = None\n\n    def test_close_files(self):\n        '''Test close_files()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 71,
                                    "startColumn": 20,
                                    "endLine": 71,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        for fn in [ 'common.py' ]:\n            # 'staging' is used with just 'install' but build_lib is used when\n            # using 'build'. We could probably override 'def build()' but this\n            # at least works\n            for d in [os.path.join(self.build_lib, \"ufw\"), 'staging']:\n                f = os.path.join(d, fn)\n                if not os.path.exists(f):\n                    continue\n                print(\"Updating \" + f)\n                subprocess.call([\"sed\",\n                                 \"-i\","
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 42,
                                    "startColumn": 32,
                                    "endLine": 42,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 160,
                                    "startColumn": 19,
                                    "endLine": 160,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Install configuration files\n        confdir = real_confdir\n        if self.root != None:\n            confdir = self.root + real_confdir\n\n        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1074,
                                    "startColumn": 21,
                                    "endLine": 1074,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        return dir\n    if dir.startswith('/'):\n        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 443,
                                    "startColumn": 11,
                                    "endLine": 443,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # pid '1' is 'init' and '0' is the kernel. This should still work when\n    # pid randomization is in use, but needs to be checked.\n    if pid == 1 or ppid <= 1:\n        return False\n\n    path = os.path.join(\"/proc\", str(ppid), \"stat\")\n    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1459,
                                    "startColumn": 24,
                                    "endLine": 1460,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\\n                                     os.path.basename(i)), \\\n                        os.path.dirname(i))\n            shutil.copymode(old, i)\n\n            try:\n                statinfo = os.stat(i)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 43,
                                    "startColumn": 31,
                                    "endLine": 43,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 94,
                                    "startColumn": 17,
                                    "endLine": 94,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if os.path.exists(sysctl):\n            os.unlink(sysctl)\n\n    def _update_sysctl(self, forward=False):\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if forward:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,\n                                     \"sysctl-forward-yes\"),\n                        sysctl)\n        else:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 322,
                                    "startColumn": 15,
                                    "endLine": 322,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            err_msg = _(\"Invalid option\")\n            raise UFWError(err_msg)\n\n        # Perform this here so we can present a nice error to the user rather\n        # than a traceback\n        if not os.access(fn, os.W_OK):\n            err_msg = _(\"'%s' is not writable\" % (fn))\n            raise UFWError(err_msg)\n\n        fns = ufw.util.open_files(fn)\n        fd = fns['tmp']"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 984,
                                    "startColumn": 11,
                                    "endLine": 984,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "startColumn": 25,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.datadir = datadir\n\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/applications.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 43,
                                    "startColumn": 12,
                                    "endLine": 43,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        raise UFWError(err_msg)\n\n    max_size = 10 * 1024 * 1024  # 10MB\n    profiles = {}\n\n    files = os.listdir(profiles_dir)\n    files.sort()\n\n    total_size = 0\n    pat = re.compile(r'^\\.')\n    for f in files:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 727,
                                    "startColumn": 14,
                                    "endLine": 727,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def _find_system_iptables():\n    exe = \"\"\n    for d in [\"/sbin\", \"/bin\",\n              \"/usr/sbin\", \"/usr/bin\",\n              \"/usr/local/sbin\", \"/usr/local/bin\"]:\n        exe = os.path.join(d, \"iptables\")\n        if os.path.exists(exe):\n            break\n        else:\n            exe = \"\"\n    if exe == \"\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 953,
                                    "startColumn": 32,
                                    "endLine": 953,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:\n                inode = os.stat(os.path.join(fd_path, j))[1]\n            except Exception: # pragma: no cover\n                continue\n            inodes[inode] = \"%s/%s\" % (i, os.path.basename(exe_path))\n\n    return inodes"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1454,
                                    "startColumn": 12,
                                    "endLine": 1454,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Move the old to the new\n        for i in allfiles:\n            fn = \"%s.%s\" % (i, ext)\n            res += _(\"Backing up '%(old)s' to '%(new)s'\\n\") % (\\\n                     {'old': os.path.basename(i), 'new': fn})\n            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 443,
                                    "startColumn": 11,
                                    "endLine": 443,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # pid '1' is 'init' and '0' is the kernel. This should still work when\n    # pid randomization is in use, but needs to be checked.\n    if pid == 1 or ppid <= 1:\n        return False\n\n    path = os.path.join(\"/proc\", str(ppid), \"stat\")\n    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 588,
                                    "startColumn": 14,
                                    "endLine": 588,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        '''Test write_to_file()'''\n        tests.unit.support.check_for_exception(self, OSError, \\\n                    ufw.util.write_to_file, None, 'foo')\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.write_to_file(fns['tmp'], \"\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 275,
                                    "startColumn": 26,
                                    "endLine": 275,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "if iptables_exe == '':\n    print(\"ERROR: could not find required binary 'iptables'\", file=sys.stderr)\n    sys.exit(1)\n\nfor e in ['ip6tables', 'iptables-restore', 'ip6tables-restore']:\n    if not os.path.exists(os.path.join(iptables_dir, e)):\n        print(\"ERROR: could not find required binary '%s'\" % (e), file=sys.stderr)\n        sys.exit(1)\n\n(rc, out) = cmd([iptables_exe, '-V'])\nif rc != 0:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 245,
                                    "startColumn": 0,
                                    "endLine": 245,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    sys.exit(1)\n\nif os.path.exists('staging'):\n    shutil.rmtree('staging')\nshutil.copytree('src', 'staging')\nos.unlink(os.path.join('staging', 'ufw-init'))\nos.unlink(os.path.join('staging', 'ufw-init-functions'))\n\niptables_exe = ''\niptables_dir = ''\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 951,
                                    "startColumn": 19,
                                    "endLine": 951,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 982,
                                    "startColumn": 9,
                                    "endLine": 982,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'state': 3,\n                        'uid': 7,\n                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 55,
                                    "startColumn": 8,
                                    "endLine": 55,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if os.path.islink(path) or not os.path.isdir(path):\n            os.unlink(path)\n        else:\n            recursive_rm(path)\n    if contents_only is False:\n        os.rmdir(dirPath)\n\n\ndef initvars(install_dir):\n    import ufw.common\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 117,
                                    "startColumn": 18,
                                    "endLine": 117,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        prefix = real_prefix\n        if self.root != None:\n            prefix = self.root + real_prefix\n\n        script = os.path.join(prefix, 'sbin', 'ufw')\n        manpage = os.path.join(prefix, 'share', 'man', 'man8', 'ufw.8')\n        manpage_f = os.path.join(prefix, 'share', 'man', 'man8', \\\n                                 'ufw-framework.8')\n\n        for f in [ script, manpage, manpage_f ]:\n            self.mkpath(os.path.dirname(f))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 46,
                                    "startColumn": 32,
                                    "endLine": 46,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_applications.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 25,
                                    "startColumn": 15,
                                    "endLine": 25,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "import ufw.applications\n\n\nclass ApplicationsTestCase(unittest.TestCase):\n    def setUp(self):\n        apps = os.path.join(ufw.common.config_dir, \"ufw/applications.d\")\n        self.profiles = ufw.applications.get_profiles(apps)\n\n    def tearDown(self):\n        pass\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 246,
                                    "startColumn": 0,
                                    "endLine": 246,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\nif os.path.exists('staging'):\n    shutil.rmtree('staging')\nshutil.copytree('src', 'staging')\nos.unlink(os.path.join('staging', 'ufw-init'))\nos.unlink(os.path.join('staging', 'ufw-init-functions'))\n\niptables_exe = ''\niptables_dir = ''\n\nfor e in ['iptables']:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 42,
                                    "startColumn": 30,
                                    "endLine": 42,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.rules = []\n        self.rules6 = []\n\n        p = _findpath(ufw.common.config_dir, datadir)\n        self.files = {'defaults': os.path.join(p, 'default/ufw'),\n                      'conf': os.path.join(p, 'ufw/ufw.conf'),\n                      'apps': os.path.join(p, 'ufw/applications.d') }\n        if extra_files is not None:\n            self.files.update(extra_files)\n\n        self.loglevels = {'off': 0,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 42,
                                    "startColumn": 32,
                                    "endLine": 42,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 937,
                                    "startColumn": 15,
                                    "endLine": 937,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 960,
                                    "startColumn": 14,
                                    "endLine": 960,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        # use fake iptables to verify other bits of the code\n        exe = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        ufw.util.get_netfilter_capabilities(exe=exe, do_checks=False)\n\n        exe = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        ufw.util.get_netfilter_capabilities(exe=exe, do_checks=False)\n\n    def test_parse_netstat_output(self):\n        '''Test parse_netstat_output()'''\n        min_out = 1"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 64,
                                    "startColumn": 33,
                                    "endLine": 65,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        self.iptables = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        self.iptables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                             \"iptables-restore\")\n        self.ip6tables = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        self.ip6tables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                              \"ip6tables-restore\")\n\n        try:\n            self.iptables_version = ufw.util.get_iptables_version(self.iptables)\n        except OSError: # pragma: no coverage\n            err_msg = _(\"Couldn't determine iptables version\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "startColumn": 25,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.datadir = datadir\n\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 412,
                                    "startColumn": 11,
                                    "endLine": 412,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        pid = int(mypid)\n    except Exception:\n        raise ValueError(\"pid must be an integer\")\n\n    name = os.path.join(\"/proc\", str(pid), \"stat\")\n    if not os.path.isfile(name):\n        raise IOError(\"Couldn't find '%s'\" % (name))\n\n    # LP: #1101304\n    # 9983 (cmd) S 923 ..."
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 470,
                                    "startColumn": 63,
                                    "endLine": 470,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")\n                    raise UFWError(err_msg)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 681,
                                    "startColumn": 8,
                                    "endLine": 681,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        fd.close()\n\n        fd_new = open(f + '.new', 'w')\n        fd_new.write(contents)\n        fd_new.close()\n        os.rename(f + '.new', f)\n\n        tests.unit.support.check_for_exception(self,\n                              ufw.common.UFWError,\n                              self.backend._get_defaults)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1417,
                                    "startColumn": 12,
                                    "endLine": 1417,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Move the old to the new\n        for i in allfiles:\n            fn = \"%s.%s\" % (i, ext)\n            res += _(\"Backing up '%(old)s' to '%(new)s'\\n\") % (\\\n                     {'old': os.path.basename(i), 'new': fn})\n            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 727,
                                    "startColumn": 14,
                                    "endLine": 727,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def _find_system_iptables():\n    exe = \"\"\n    for d in [\"/sbin\", \"/bin\",\n              \"/usr/sbin\", \"/usr/bin\",\n              \"/usr/local/sbin\", \"/usr/local/bin\"]:\n        exe = os.path.join(d, \"iptables\")\n        if os.path.exists(exe):\n            break\n        else:\n            exe = \"\"\n    if exe == \"\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 218,
                                    "startColumn": 36,
                                    "endLine": 218,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            warn(warn_msg)\n        else:\n            pat = re.compile(r'^\\.')\n            for profile in os.listdir(self.files['apps']):\n                if not pat.search(profile):\n                    profiles.append(os.path.join(self.files['apps'], profile))\n\n        for path in list(self.files.values()) + \\\n                [ os.path.abspath(sys.argv[0]) ] + \\\n                profiles:\n            if not path.startswith('/'):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1394,
                                    "startColumn": 17,
                                    "endLine": 1395,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        allfiles = []\n        for i in self.files:\n            if not self.files[i].endswith('.rules'):\n                continue\n            allfiles.append(self.files[i])\n            fn = os.path.join(share_dir, \"iptables\", \\\n                              os.path.basename(self.files[i]))\n            if not os.path.isfile(fn):\n                err_msg = _(\"Could not find '%s'. Aborting\") % (fn)\n                raise UFWError(err_msg)\n\n        ext = time.strftime(\"%Y%m%d_%H%M%S\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 43,
                                    "startColumn": 31,
                                    "endLine": 43,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 941,
                                    "startColumn": 15,
                                    "endLine": 941,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 96,
                                    "startColumn": 24,
                                    "endLine": 97,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            os.unlink(sysctl)\n\n    def _update_sysctl(self, forward=False):\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if forward:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,\n                                     \"sysctl-forward-yes\"),\n                        sysctl)\n        else:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,\n                                     \"sysctl-forward-no\"),\n                        sysctl)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1422,
                                    "startColumn": 24,
                                    "endLine": 1423,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\\n                                     os.path.basename(i)), \\\n                        os.path.dirname(i))\n            shutil.copymode(old, i)\n\n            try:\n                statinfo = os.stat(i)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 934,
                                    "startColumn": 18,
                                    "endLine": 934,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):\n            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 42,
                                    "startColumn": 32,
                                    "endLine": 42,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 45,
                                    "startColumn": 33,
                                    "endLine": 45,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 934,
                                    "startColumn": 18,
                                    "endLine": 934,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):\n            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 641,
                                    "startColumn": 14,
                                    "endLine": 641,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        tests.unit.support.check_for_exception(self, OSError,\n                                               ufw.util.close_files,\n                                               fns, True)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['tmpname'])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 486,
                                    "startColumn": 63,
                                    "endLine": 486,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")\n                    raise UFWError(err_msg)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 63,
                                    "startColumn": 24,
                                    "endLine": 63,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        real_prefix = self.prefix\n        if self.home != None:\n            real_confdir = self.home + real_confdir\n            real_statedir = self.home + real_statedir\n            real_prefix = self.home + '/usr'\n        real_sharedir = os.path.join(real_prefix, 'share', 'ufw')\n\n        # Update the modules' paths\n        for fn in [ 'common.py' ]:\n            # 'staging' is used with just 'install' but build_lib is used when\n            # using 'build'. We could probably override 'def build()' but this"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 557,
                                    "startColumn": 14,
                                    "endLine": 557,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                    ufw.util.normalize_address, ip, v6)\n\n    def test_open_file_read(self):\n        '''Test open_file_read()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        tests.unit.support.check_for_exception(self, IOError, \\\n                    ufw.util.open_file_read, tmp + 'nonexistent')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "startColumn": 25,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.datadir = datadir\n\n        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 168,
                                    "startColumn": 22,
                                    "endLine": 168,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')\n        init_after_hook = os.path.join(confdir, 'ufw', 'after.init')\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 947,
                                    "startColumn": 19,
                                    "endLine": 947,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 646,
                                    "startColumn": 8,
                                    "endLine": 646,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['tmpname'])\n        tests.unit.support.check_for_exception(self, OSError,\n                                               ufw.util.close_files,\n                                               fns, False)\n\n    def test_cmd(self):"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 167,
                                    "startColumn": 21,
                                    "endLine": 167,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')\n        init_after_hook = os.path.join(confdir, 'ufw', 'after.init')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 957,
                                    "startColumn": 32,
                                    "endLine": 957,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:\n                inode = os.stat(os.path.join(fd_path, j))[1]\n            except Exception: # pragma: no cover\n                continue\n            inodes[inode] = \"%s/%s\" % (i, os.path.basename(exe_path))\n\n    return inodes"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 953,
                                    "startColumn": 32,
                                    "endLine": 953,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:\n                inode = os.stat(os.path.join(fd_path, j))[1]\n            except Exception: # pragma: no cover\n                continue\n            inodes[inode] = \"%s/%s\" % (i, os.path.basename(exe_path))\n\n    return inodes"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 937,
                                    "startColumn": 15,
                                    "endLine": 937,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 161,
                                    "startColumn": 18,
                                    "endLine": 161,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        confdir = real_confdir\n        if self.root != None:\n            confdir = self.root + real_confdir\n\n        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 261,
                                    "startColumn": 31,
                                    "endLine": 261,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    for dir in ['/usr/sbin', '/sbin', '/usr/bin', '/bin', '/usr/local/sbin', \\\n                '/usr/local/bin']:\n        if e == \"iptables\":\n            if os.path.exists(os.path.join(dir, e)):\n                iptables_dir = dir\n                iptables_exe = os.path.join(iptables_dir, \"iptables\")\n                print(\"Found '%s'\" % iptables_exe)\n            else:\n                continue\n\n        if iptables_exe != \"\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 43,
                                    "startColumn": 30,
                                    "endLine": 43,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.rules6 = []\n\n        p = _findpath(ufw.common.config_dir, datadir)\n        self.files = {'defaults': os.path.join(p, 'default/ufw'),\n                      'conf': os.path.join(p, 'ufw/ufw.conf'),\n                      'apps': os.path.join(p, 'ufw/applications.d') }\n        if extra_files is not None:\n            self.files.update(extra_files)\n\n        self.loglevels = {'off': 0,\n                          'low': 100,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 149,
                                    "startColumn": 18,
                                    "endLine": 149,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        # Install translations\n        transdir = real_sharedir\n        if self.root != None:\n            transdir = self.root + real_sharedir\n        i18ndir = os.path.join(transdir, 'messages')\n        self.mkpath(i18ndir)\n        if len(os.listdir('locales/mo')) == 0:\n            subprocess.call([\"make\", \"mo\"])\n        self.copy_tree('locales/mo', i18ndir)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 73,
                                    "startColumn": 27,
                                    "endLine": 74,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    ufw.common.config_dir = os.path.join(\n                             os.path.realpath(topdir), \"ufw/etc\")\n    ufw.common.state_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/lib/ufw\")\n    ufw.common.share_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/usr/share/ufw\")\n    ufw.common.trans_dir = ufw.common.share_dir\n    ufw.common.prefix_dir = os.path.join(os.path.realpath(topdir), \"ufw/usr\")\n\n\ndef run_setup():"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 630,
                                    "startColumn": 14,
                                    "endLine": 630,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns, update=False)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['origname'])"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 69,
                                    "startColumn": 28,
                                    "endLine": 70,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    global topdir\n    d = os.path.join(os.path.dirname(os.path.realpath(topdir)),\n                     \"fake-binaries\")\n    ufw.common.iptables_dir = d\n\n    ufw.common.config_dir = os.path.join(\n                             os.path.realpath(topdir), \"ufw/etc\")\n    ufw.common.state_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/lib/ufw\")\n    ufw.common.share_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/usr/share/ufw\")\n    ufw.common.trans_dir = ufw.common.share_dir"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 988,
                                    "startColumn": 11,
                                    "endLine": 988,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 275,
                                    "startColumn": 4,
                                    "endLine": 275,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    if update:\n        shutil.copystat(fns['origname'], fns['tmpname'])\n        shutil.copy(fns['tmpname'], fns['origname'])\n\n    os.unlink(fns['tmpname'])\n\n\ndef cmd(command):\n    '''Try to execute the given command.'''\n    debug(command)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1070,
                                    "startColumn": 21,
                                    "endLine": 1070,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        return dir\n    if dir.startswith('/'):\n        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 635,
                                    "startColumn": 8,
                                    "endLine": 635,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        os.unlink(fns['origname'])\n        tests.unit.support.check_for_exception(self, OSError,\n                                               ufw.util.close_files,\n                                               fns, True)\n\n        self.tmpdir = tempfile.mkdtemp()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 179,
                                    "startColumn": 27,
                                    "endLine": 179,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        for f in [ defaults, ufwconf ]:\n            self.mkpath(os.path.dirname(f))\n\n        self.mkpath(apps_dir)\n        for f in os.listdir('profiles'):\n            self.copy_file(os.path.join('profiles', f), apps_dir)\n\n        self.copy_file('conf/ufw.defaults', defaults)\n        self.copy_file('conf/ufw.conf', ufwconf)\n        self.copy_file('conf/sysctl.conf', sysctl)\n        self.copy_file('conf/before.rules', before_rules)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 570,
                                    "startColumn": 14,
                                    "endLine": 570,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        f.close()\n\n    def test_open_files(self):\n        '''Test open_files()'''\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        tests.unit.support.check_for_exception(self, IOError, \\\n                    ufw.util.open_files, tmp + 'nonexistent')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 44,
                                    "startColumn": 26,
                                    "endLine": 44,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1451,
                                    "startColumn": 24,
                                    "endLine": 1452,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\\n                                     os.path.basename(i)), \\\n                        os.path.dirname(i))\n            shutil.copymode(old, i)\n\n            try:\n                statinfo = os.stat(i)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 946,
                                    "startColumn": 35,
                                    "endLine": 946,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 141,
                                    "startColumn": 32,
                                    "endLine": 141,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if self.root != None:\n            statedir = self.root + real_statedir\n        self.mkpath(statedir)\n\n        init_helper = os.path.join(statedir, 'ufw-init')\n        init_helper_functions = os.path.join(statedir, 'ufw-init-functions')\n        self.copy_file('src/ufw-init', init_helper)\n        self.copy_file('src/ufw-init-functions', init_helper_functions)\n\n        # Install translations\n        transdir = real_sharedir"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 984,
                                    "startColumn": 11,
                                    "endLine": 984,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []\n    skipped_first = False\n    lines = open(fn).readlines()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 216,
                                    "startColumn": 27,
                                    "endLine": 216,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if not os.path.isdir(self.files['apps']):\n            warn_msg = _(\"'%s' does not exist\") % (self.files['apps'])\n            warn(warn_msg)\n        else:\n            pat = re.compile(r'^\\.')\n            for profile in os.listdir(self.files['apps']):\n                if not pat.search(profile):\n                    profiles.append(os.path.join(self.files['apps'], profile))\n\n        for path in list(self.files.values()) + \\\n                [ os.path.abspath(sys.argv[0]) ] + \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1423,
                                    "startColumn": 17,
                                    "endLine": 1424,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        allfiles = []\n        for i in self.files:\n            if not self.files[i].endswith('.rules'):\n                continue\n            allfiles.append(self.files[i])\n            fn = os.path.join(share_dir, \"iptables\", \\\n                              os.path.basename(self.files[i]))\n            if not os.path.isfile(fn):\n                err_msg = _(\"Could not find '%s'. Aborting\") % (fn)\n                raise UFWError(err_msg)\n\n        ext = time.strftime(\"%Y%m%d_%H%M%S\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 275,
                                    "startColumn": 4,
                                    "endLine": 275,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    if update:\n        shutil.copystat(fns['origname'], fns['tmpname'])\n        shutil.copy(fns['tmpname'], fns['origname'])\n\n    os.unlink(fns['tmpname'])\n\n\ndef cmd(command):\n    '''Try to execute the given command.'''\n    debug(command)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 49,
                                    "startColumn": 15,
                                    "endLine": 49,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef recursive_rm(dirPath, contents_only=False):\n    '''recursively remove directory'''\n    names = os.listdir(dirPath)\n    for name in names:\n        path = os.path.join(dirPath, name)\n        if os.path.islink(path) or not os.path.isdir(path):\n            os.unlink(path)\n        else:\n            recursive_rm(path)\n    if contents_only is False:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 44,
                                    "startColumn": 26,
                                    "endLine": 44,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 942,
                                    "startColumn": 35,
                                    "endLine": 942,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 580,
                                    "startColumn": 8,
                                    "endLine": 580,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                    ufw.util.open_files, tmp + 'nonexistent')\n\n        fns = ufw.util.open_files(tmp)\n        fns['orig'].close()\n        os.close(fns['tmp'])\n        os.unlink(fns['tmpname'])\n\n    def test_write_to_file(self):\n        '''Test write_to_file()'''\n        tests.unit.support.check_for_exception(self, OSError, \\\n                    ufw.util.write_to_file, None, 'foo')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1090,
                                    "startColumn": 13,
                                    "endLine": 1090,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        lock = ufw.util.create_lock(dryrun=True)\n        self.assertTrue(lock is None)\n        ufw.util.release_lock(lock)\n\n        self.tmpdir = tempfile.mkdtemp()\n        fn = os.path.join(self.tmpdir, \"lock\")\n        lock = ufw.util.create_lock(lockfile=fn, dryrun=False)\n        self.assertTrue(lock is not None)\n        ufw.util.release_lock(lock)\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 727,
                                    "startColumn": 14,
                                    "endLine": 727,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def _find_system_iptables():\n    exe = \"\"\n    for d in [\"/sbin\", \"/bin\",\n              \"/usr/sbin\", \"/usr/bin\",\n              \"/usr/local/sbin\", \"/usr/local/bin\"]:\n        exe = os.path.join(d, \"iptables\")\n        if os.path.exists(exe):\n            break\n        else:\n            exe = \"\"\n    if exe == \"\":"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 622,
                                    "startColumn": 14,
                                    "endLine": 622,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns)\n\n        self.tmpdir = tempfile.mkdtemp()\n        tmp = os.path.join(self.tmpdir, \"foo\")\n        f = open(tmp, 'w')\n        f.close()\n\n        fns = ufw.util.open_files(tmp)\n        ufw.util.close_files(fns, update=False)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1072,
                                    "startColumn": 17,
                                    "endLine": 1072,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n\ndef hex_encode(s):\n    '''Take a string and convert it to a hex string'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 45,
                                    "startColumn": 33,
                                    "endLine": 45,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 60,
                                    "startColumn": 24,
                                    "endLine": 60,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self._get_defaults()\n        self._read_rules()\n\n        self.profiles = ufw.applications.get_profiles(self.files['apps'])\n\n        self.iptables = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        self.iptables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                             \"iptables-restore\")\n        self.ip6tables = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        self.ip6tables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                              \"ip6tables-restore\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 51,
                                    "startColumn": 24,
                                    "endLine": 52,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),\n                                     'ufw-init')\n\n        ufw.backend.UFWBackend.__init__(self, \"iptables\", dryrun, files,\n                                        rootdir=rootdir, datadir=datadir)\n\n        self.chains = {'before': [], 'user': [], 'after': [], 'misc': []}"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 56,
                                    "startColumn": 12,
                                    "endLine": 56,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.prevpath = os.environ['PATH']\n        os.environ['PATH'] = \"%s:%s\" % (ufw.common.iptables_dir,\n                                        os.environ['PATH'])\n\n        # update ufw-init-functions to use our fake iptables* commands\n        f = os.path.join(ufw.common.state_dir, \"ufw-init-functions\")\n        contents = \"\"\n        fd = open(f, 'r')\n        for line in fd.readlines():\n            if re.search(\"^PATH=\", line):\n                line = \"#\" + line"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 485,
                                    "startColumn": 63,
                                    "endLine": 485,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                            (rule.protocol)\n                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 61,
                                    "startColumn": 32,
                                    "endLine": 62,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self._read_rules()\n\n        self.profiles = ufw.applications.get_profiles(self.files['apps'])\n\n        self.iptables = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        self.iptables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                             \"iptables-restore\")\n        self.ip6tables = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        self.ip6tables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                              \"ip6tables-restore\")\n\n        try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 71,
                                    "startColumn": 27,
                                    "endLine": 72,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                     \"fake-binaries\")\n    ufw.common.iptables_dir = d\n\n    ufw.common.config_dir = os.path.join(\n                             os.path.realpath(topdir), \"ufw/etc\")\n    ufw.common.state_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/lib/ufw\")\n    ufw.common.share_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/usr/share/ufw\")\n    ufw.common.trans_dir = ufw.common.share_dir\n    ufw.common.prefix_dir = os.path.join(os.path.realpath(topdir), \"ufw/usr\")\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 70,
                                    "startColumn": 22,
                                    "endLine": 70,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Update the modules' paths\n        for fn in [ 'common.py' ]:\n            # 'staging' is used with just 'install' but build_lib is used when\n            # using 'build'. We could probably override 'def build()' but this\n            # at least works\n            for d in [os.path.join(self.build_lib, \"ufw\"), 'staging']:\n                f = os.path.join(d, fn)\n                if not os.path.exists(f):\n                    continue\n                print(\"Updating \" + f)\n                subprocess.call([\"sed\","
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1431,
                                    "startColumn": 17,
                                    "endLine": 1432,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        allfiles = []\n        for i in self.files:\n            if not self.files[i].endswith('.rules'):\n                continue\n            allfiles.append(self.files[i])\n            fn = os.path.join(share_dir, \"iptables\", \\\n                              os.path.basename(self.files[i]))\n            if not os.path.isfile(fn):\n                err_msg = _(\"Could not find '%s'. Aborting\") % (fn)\n                raise UFWError(err_msg)\n\n        ext = time.strftime(\"%Y%m%d_%H%M%S\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 44,
                                    "startColumn": 26,
                                    "endLine": 44,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 793,
                                    "startColumn": 15,
                                    "endLine": 793,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if v6:\n            rules_file = self.files['rules6']\n\n        # Perform this here so we can present a nice error to the user rather\n        # than a traceback\n        if not os.access(rules_file, os.W_OK):\n            err_msg = _(\"'%s' is not writable\" % (rules_file))\n            raise UFWError(err_msg)\n\n        try:\n            fns = ufw.util.open_files(rules_file)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 84,
                                    "startColumn": 4,
                                    "endLine": 84,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "def run_setup():\n    global topdir\n    install_dir = os.path.join(topdir, \"ufw\")\n    if os.path.exists(topdir):\n        recursive_rm(topdir)\n    os.mkdir(topdir)\n\n    exe = \"python%d\" % sys.version_info[0]\n    if sys.version_info[0] == 2:\n        exe = \"python\"\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 166,
                                    "startColumn": 23,
                                    "endLine": 166,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 65,
                                    "startColumn": 8,
                                    "endLine": 66,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    global _\n    _ = init_gettext()\n\n    global topdir\n    d = os.path.join(os.path.dirname(os.path.realpath(topdir)),\n                     \"fake-binaries\")\n    ufw.common.iptables_dir = d\n\n    ufw.common.config_dir = os.path.join(\n                             os.path.realpath(topdir), \"ufw/etc\")\n    ufw.common.state_dir = os.path.join("
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 170,
                                    "startColumn": 19,
                                    "endLine": 170,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')\n        init_after_hook = os.path.join(confdir, 'ufw', 'after.init')\n\n        for f in [ defaults, ufwconf ]:\n            self.mkpath(os.path.dirname(f))"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 46,
                                    "startColumn": 32,
                                    "endLine": 46,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 816,
                                    "startColumn": 15,
                                    "endLine": 816,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if v6:\n            rules_file = self.files['rules6']\n\n        # Perform this here so we can present a nice error to the user rather\n        # than a traceback\n        if not os.access(rules_file, os.W_OK):\n            err_msg = _(\"'%s' is not writable\" % (rules_file))\n            raise UFWError(err_msg)\n\n        try:\n            fns = ufw.util.open_files(rules_file)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 275,
                                    "startColumn": 4,
                                    "endLine": 275,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    if update:\n        shutil.copystat(fns['origname'], fns['tmpname'])\n        shutil.copy(fns['tmpname'], fns['origname'])\n\n    os.unlink(fns['tmpname'])\n\n\ndef cmd(command):\n    '''Try to execute the given command.'''\n    debug(command)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-lev-cat-range.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 469,
                                    "startColumn": 63,
                                    "endLine": 469,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                            (rule.protocol)\n                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 43,
                                    "startColumn": 31,
                                    "endLine": 43,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files = {}\n        config_dir = _findpath(ufw.common.config_dir, datadir)\n\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 163,
                                    "startColumn": 23,
                                    "endLine": 163,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            confdir = self.root + real_confdir\n\n        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 89,
                                    "startColumn": 17,
                                    "endLine": 89,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if self.msg_output:\n            ufw.util.msg_output = self.saved_msg_output\n            self.msg_output.close()\n            self.msg_output = None\n\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if os.path.exists(sysctl):\n            os.unlink(sysctl)\n\n    def _update_sysctl(self, forward=False):\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 51,
                                    "startColumn": 12,
                                    "endLine": 51,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    '''recursively remove directory'''\n    names = os.listdir(dirPath)\n    for name in names:\n        path = os.path.join(dirPath, name)\n        if os.path.islink(path) or not os.path.isdir(path):\n            os.unlink(path)\n        else:\n            recursive_rm(path)\n    if contents_only is False:\n        os.rmdir(dirPath)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 46,
                                    "startColumn": 32,
                                    "endLine": 46,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 443,
                                    "startColumn": 11,
                                    "endLine": 443,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # pid '1' is 'init' and '0' is the kernel. This should still work when\n    # pid randomization is in use, but needs to be checked.\n    if pid == 1 or ppid <= 1:\n        return False\n\n    path = os.path.join(\"/proc\", str(ppid), \"stat\")\n    if not os.path.isfile(path): # pragma: no cover\n        err_msg = _(\"Couldn't find '%s'\") % (path)\n        raise ValueError(err_msg)\n\n    try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "startColumn": 34,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.dryrun = dryrun\n        self.rules = []\n        self.rules6 = []\n\n        p = _findpath(ufw.common.config_dir, datadir)\n        self.files = {'defaults': os.path.join(p, 'default/ufw'),\n                      'conf': os.path.join(p, 'ufw/ufw.conf'),\n                      'apps': os.path.join(p, 'ufw/applications.d') }\n        if extra_files is not None:\n            self.files.update(extra_files)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 947,
                                    "startColumn": 19,
                                    "endLine": 947,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)\n        except Exception: # pragma: no cover\n            continue\n\n        for j in dirs:\n            try:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 162,
                                    "startColumn": 17,
                                    "endLine": 162,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if self.root != None:\n            confdir = self.root + real_confdir\n\n        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 663,
                                    "startColumn": 8,
                                    "endLine": 663,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        fd.close()\n\n        fd_new = open(f + '.new', 'w')\n        fd_new.write(contents)\n        fd_new.close()\n        os.rename(f + '.new', f)\n\n        tests.unit.support.check_for_exception(self,\n                              ufw.common.UFWError,\n                              self.backend._get_defaults)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/runner.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 41,
                                    "startColumn": 16,
                                    "endLine": 41,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)\n    tests = []\n    for name in names:\n        if name[:5] == \"test_\" and name[-3:] == \".py\":\n            tests.append(name[:-3])\n    tests.sort()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2,
                                "x-trace": [
                                    {
                                        "position": 0,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 41,
                                        "lineEnd": 41,
                                        "columnStart": 16,
                                        "columnEnd": null,
                                        "description": "listdir",
                                        "snippet": "        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)\n    tests = []\n    for name in names:\n        if name[:5] == \"test_\" and name[-3:] == \".py\":\n            tests.append(name[:-3])\n    tests.sort()"
                                    },
                                    {
                                        "position": 1,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 41,
                                        "lineEnd": 41,
                                        "columnStart": 27,
                                        "columnEnd": null,
                                        "description": "testdir",
                                        "snippet": "        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)\n    tests = []\n    for name in names:\n        if name[:5] == \"test_\" and name[-3:] == \".py\":\n            tests.append(name[:-3])\n    tests.sort()"
                                    },
                                    {
                                        "position": 2,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 36,
                                        "lineEnd": 36,
                                        "columnStart": 8,
                                        "columnEnd": null,
                                        "description": "testdir",
                                        "snippet": "            fn = sys.argv[0]\n        else:\n            print(\"TODO: find_tests() when imported\")\n            sys.exit(1)\n\n        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)"
                                    },
                                    {
                                        "position": 3,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 36,
                                        "lineEnd": 36,
                                        "columnStart": 25,
                                        "columnEnd": null,
                                        "description": "dirname",
                                        "snippet": "            fn = sys.argv[0]\n        else:\n            print(\"TODO: find_tests() when imported\")\n            sys.exit(1)\n\n        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)"
                                    },
                                    {
                                        "position": 4,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 36,
                                        "lineEnd": 36,
                                        "columnStart": 34,
                                        "columnEnd": null,
                                        "description": "fn",
                                        "snippet": "            fn = sys.argv[0]\n        else:\n            print(\"TODO: find_tests() when imported\")\n            sys.exit(1)\n\n        testdir = os.path.dirname(fn)\n\n    if len(testscripts) > 1:\n        names = testscripts[1:]\n    else:\n        names = os.listdir(testdir)"
                                    },
                                    {
                                        "position": 5,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 31,
                                        "lineEnd": 31,
                                        "columnStart": 12,
                                        "columnEnd": null,
                                        "description": "fn",
                                        "snippet": "\ndef find_tests(testdir=None, testscripts=[]):\n    '''Find tests'''\n    if not testdir:\n        if __name__ == '__main__':\n            fn = sys.argv[0]\n        else:\n            print(\"TODO: find_tests() when imported\")\n            sys.exit(1)\n\n        testdir = os.path.dirname(fn)"
                                    },
                                    {
                                        "position": 6,
                                        "source": "ufw-0.36.2/tests/unit/runner.py",
                                        "lineStart": 31,
                                        "lineEnd": 31,
                                        "columnStart": 17,
                                        "columnEnd": null,
                                        "description": "sys.argv[0]",
                                        "snippet": "\ndef find_tests(testdir=None, testscripts=[]):\n    '''Find tests'''\n    if not testdir:\n        if __name__ == '__main__':\n            fn = sys.argv[0]\n        else:\n            print(\"TODO: find_tests() when imported\")\n            sys.exit(1)\n\n        testdir = os.path.dirname(fn)"
                                    }
                                ]
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 51,
                                    "startColumn": 24,
                                    "endLine": 52,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),\n                                     'ufw-init')\n\n        ufw.backend.UFWBackend.__init__(self, \"iptables\", dryrun, files,\n                                        rootdir=rootdir, datadir=datadir)\n\n        self.chains = {'before': [], 'user': [], 'after': [], 'misc': []}"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 239,
                                    "startColumn": 12,
                                    "endLine": 239,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.assertEquals(res, 'WWW')\n\n        res = self.backend.find_application_name('WwW')\n        self.assertEquals(res, 'WWW')\n\n        f = os.path.join(self.backend.files['apps'], \"testapp\")\n        contents = '''\n[WWw]\ntitle=Duplicate Web Server\ndescription=Duplicate Web server\nports=80/tcp"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 51,
                                    "startColumn": 24,
                                    "endLine": 52,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)\n        files['init'] = os.path.join(_findpath(ufw.common.state_dir, rootdir),\n                                     'ufw-init')\n\n        ufw.backend.UFWBackend.__init__(self, \"iptables\", dryrun, files,\n                                        rootdir=rootdir, datadir=datadir)\n\n        self.chains = {'before': [], 'user': [], 'after': [], 'misc': []}"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 598,
                                    "startColumn": 8,
                                    "endLine": 598,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        ufw.util.write_to_file(fns['tmp'], \"\")\n        ufw.util.write_to_file(fns['tmp'], \"test\")\n\n        fns['orig'].close()\n        os.close(fns['tmp'])\n        os.unlink(fns['tmpname'])\n\n        search = \"test string\"\n        ufw.util.msg_output = StringIO()\n        ufw.util.write_to_file(sys.stdout.fileno(), search)\n        out = ufw.util.msg_output.getvalue()"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 172,
                                    "startColumn": 26,
                                    "endLine": 172,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')\n        init_after_hook = os.path.join(confdir, 'ufw', 'after.init')\n\n        for f in [ defaults, ufwconf ]:\n            self.mkpath(os.path.dirname(f))\n\n        self.mkpath(apps_dir)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 469,
                                    "startColumn": 63,
                                    "endLine": 469,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                            (rule.protocol)\n                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 76,
                                    "startColumn": 28,
                                    "endLine": 76,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    ufw.common.state_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/lib/ufw\")\n    ufw.common.share_dir = os.path.join(\n                            os.path.realpath(topdir), \"ufw/usr/share/ufw\")\n    ufw.common.trans_dir = ufw.common.share_dir\n    ufw.common.prefix_dir = os.path.join(os.path.realpath(topdir), \"ufw/usr\")\n\n\ndef run_setup():\n    global topdir\n    install_dir = os.path.join(topdir, \"ufw\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 938,
                                    "startColumn": 18,
                                    "endLine": 938,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    inodes = dict()\n    for i in proc_files:\n        if not pat.match(i):\n            continue\n\n        fd_path = os.path.join(\"/proc\", i, \"fd\")\n\n        # skip stuff we can't read or that goes away\n        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 171,
                                    "startColumn": 27,
                                    "endLine": 171,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')\n        init_before_hook = os.path.join(confdir, 'ufw', 'before.init')\n        init_after_hook = os.path.join(confdir, 'ufw', 'after.init')\n\n        for f in [ defaults, ufwconf ]:\n            self.mkpath(os.path.dirname(f))\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 986,
                                    "startColumn": 9,
                                    "endLine": 986,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'state': 3,\n                        'uid': 7,\n                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1072,
                                    "startColumn": 17,
                                    "endLine": 1072,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n\ndef hex_encode(s):\n    '''Take a string and convert it to a hex string'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1070,
                                    "startColumn": 21,
                                    "endLine": 1070,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        return dir\n    if dir.startswith('/'):\n        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 942,
                                    "startColumn": 35,
                                    "endLine": 942,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if not os.access(fd_path, os.F_OK | os.R_OK):\n            continue\n\n        exe_path = \"-\"\n        try:\n            exe_path = os.readlink(os.path.join(\"/proc\", i, \"exe\"))\n        except Exception: # pragma: no cover\n            pass\n\n        try:\n            dirs = os.listdir(fd_path)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_frontend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 38,
                                    "startColumn": 30,
                                    "endLine": 38,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        ufw.common.do_checks = False\n        iptables_dir = \"\"\n        for d in [\"/sbin\", \"/bin\",\n                  \"/usr/sbin\", \"/usr/bin\",\n                  \"/usr/local/sbin\", \"/usr/local/bin\"]:\n            if os.path.exists(os.path.join(d, \"iptables\")):\n                iptables_dir = d\n                break\n        self.assertTrue(iptables_dir != \"\")\n        ufw.common.iptables_dir = iptables_dir\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 91,
                                    "startColumn": 12,
                                    "endLine": 91,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "            self.msg_output.close()\n            self.msg_output = None\n\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if os.path.exists(sysctl):\n            os.unlink(sysctl)\n\n    def _update_sysctl(self, forward=False):\n        sysctl = os.path.join(ufw.common.iptables_dir, \"sysctl\")\n        if forward:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 71,
                                    "startColumn": 8,
                                    "endLine": 71,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        fd_new = open(f + '.new', 'w')\n        fd_new.write(contents)\n        fd_new.close()\n\n        os.rename(f + '.new', f)\n\n    def tearDown(self):\n        self.ui.backend = None\n        self.ui = None\n        self.backend = None"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 118,
                                    "startColumn": 20,
                                    "endLine": 119,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if self.root != None:\n            prefix = self.root + real_prefix\n\n        script = os.path.join(prefix, 'sbin', 'ufw')\n        manpage = os.path.join(prefix, 'share', 'man', 'man8', 'ufw.8')\n        manpage_f = os.path.join(prefix, 'share', 'man', 'man8', \\\n                                 'ufw-framework.8')\n\n        for f in [ script, manpage, manpage_f ]:\n            self.mkpath(os.path.dirname(f))\n\n        # update the interpreter to that of the one the user specified for setup"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 164,
                                    "startColumn": 22,
                                    "endLine": 164,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 63,
                                    "startColumn": 25,
                                    "endLine": 63,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        self.profiles = ufw.applications.get_profiles(self.files['apps'])\n\n        self.iptables = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        self.iptables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                             \"iptables-restore\")\n        self.ip6tables = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        self.ip6tables_restore = os.path.join(ufw.common.iptables_dir, \\\n                                              \"ip6tables-restore\")\n\n        try:\n            self.iptables_version = ufw.util.get_iptables_version(self.iptables)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 165,
                                    "startColumn": 24,
                                    "endLine": 165,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        defaults = os.path.join(confdir, 'default', 'ufw')\n        ufwconf = os.path.join(confdir, 'ufw', 'ufw.conf')\n        sysctl = os.path.join(confdir, 'ufw', 'sysctl.conf')\n        before_rules = os.path.join(confdir, 'ufw', 'before.rules')\n        after_rules = os.path.join(confdir, 'ufw', 'after.rules')\n        before6_rules = os.path.join(confdir, 'ufw', 'before6.rules')\n        after6_rules = os.path.join(confdir, 'ufw', 'after6.rules')\n        user_rules = os.path.join(confdir, 'ufw', 'user.rules')\n        user6_rules = os.path.join(confdir, 'ufw', 'user6.rules')\n\n        apps_dir = os.path.join(confdir, 'ufw', 'applications.d')"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-delete.patch/src/parser.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 470,
                                    "startColumn": 63,
                                    "endLine": 470,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                raise UFWError(err_msg)\n\n        if rule:\n            if rule.mac:\n                nf_caps4 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"iptables\"))\n                nf_caps6 = ufw.util.get_netfilter_capabilities(os.path.join(ufw.common.iptables_dir, \"ip6tables\"))\n                if not 'astralabel' in nf_caps6:\n                    type = \"v4\"\n                if not 'astralabel' in nf_caps4:\n                    err_msg = _(\"iptables-astralabel not detected\")\n                    raise UFWError(err_msg)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 197,
                                    "startColumn": 12,
                                    "endLine": 197,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        # Update the installed rules files' permissions\n        for f in [ before_rules, after_rules, before6_rules, after6_rules, \\\n                      user_rules, user6_rules, init_before_hook, \\\n                      init_after_hook ]:\n            os.chmod(f, 0o640)\n\n        # Update the installed files' paths\n        for f in [ defaults, ufwconf, before_rules, after_rules, \\\n                      before6_rules, after6_rules, script, \\\n                      manpage, manpage_f, sysctl, init_helper, \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1076,
                                    "startColumn": 17,
                                    "endLine": 1076,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if len(dir) < 2:  # /\n            newdir = prefix\n        else:\n            newdir = os.path.join(prefix, dir[1:])\n    else:\n        newdir = os.path.join(prefix, dir)\n    return newdir\n\n\ndef hex_encode(s):\n    '''Take a string and convert it to a hex string'''"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 81,
                                    "startColumn": 18,
                                    "endLine": 81,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    ufw.common.prefix_dir = os.path.join(os.path.realpath(topdir), \"ufw/usr\")\n\n\ndef run_setup():\n    global topdir\n    install_dir = os.path.join(topdir, \"ufw\")\n    if os.path.exists(topdir):\n        recursive_rm(topdir)\n    os.mkdir(topdir)\n\n    exe = \"python%d\" % sys.version_info[0]"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 957,
                                    "startColumn": 14,
                                    "endLine": 957,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Verify we are root check\n        tests.unit.support.check_for_exception(self, OSError, \\\n                 ufw.util.get_netfilter_capabilities)\n\n        # use fake iptables to verify other bits of the code\n        exe = os.path.join(ufw.common.iptables_dir, \"iptables\")\n        ufw.util.get_netfilter_capabilities(exe=exe, do_checks=False)\n\n        exe = os.path.join(ufw.common.iptables_dir, \"ip6tables\")\n        ufw.util.get_netfilter_capabilities(exe=exe, do_checks=False)\n"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 412,
                                    "startColumn": 11,
                                    "endLine": 412,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        pid = int(mypid)\n    except Exception:\n        raise ValueError(\"pid must be an integer\")\n\n    name = os.path.join(\"/proc\", str(pid), \"stat\")\n    if not os.path.isfile(name):\n        raise IOError(\"Couldn't find '%s'\" % (name))\n\n    # LP: #1101304\n    # 9983 (cmd) S 923 ..."
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 824,
                                    "startColumn": 15,
                                    "endLine": 824,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if v6:\n            rules_file = self.files['rules6']\n\n        # Perform this here so we can present a nice error to the user rather\n        # than a traceback\n        if not os.access(rules_file, os.W_OK):\n            err_msg = _(\"'%s' is not writable\" % (rules_file))\n            raise UFWError(err_msg)\n\n        try:\n            fns = ufw.util.open_files(rules_file)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 1446,
                                    "startColumn": 12,
                                    "endLine": 1446,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        # Move the old to the new\n        for i in allfiles:\n            fn = \"%s.%s\" % (i, ext)\n            res += _(\"Backing up '%(old)s' to '%(new)s'\\n\") % (\\\n                     {'old': os.path.basename(i), 'new': fn})\n            os.rename(i, fn)\n\n        # Copy files into place\n        for i in allfiles:\n            old = \"%s.%s\" % (i, ext)\n            shutil.copy(os.path.join(share_dir, \"iptables\", \\"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-mac-disp.patch/src/backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 45,
                                    "startColumn": 33,
                                    "endLine": 45,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n        files['rules'] = os.path.join(config_dir, 'ufw/user.rules')\n        files['before_rules'] = os.path.join(config_dir, 'ufw/before.rules')\n        files['after_rules'] = os.path.join(config_dir, 'ufw/after.rules')\n        files['rules6'] = os.path.join(config_dir, 'ufw/user6.rules')\n        files['before6_rules'] = os.path.join(config_dir, 'ufw/before6.rules')\n        files['after6_rules'] = os.path.join(config_dir, 'ufw/after6.rules')\n        # when rootdir/datadir are not set, ufw-init is in the same area as\n        # the lock files (ufw.common.state_dir, aka /lib/ufw), but when set,\n        # ufw-init is in rootdir/lib/ufw (ro) and the lockfiles in\n        # datadir/lib/ufw (rw)"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/test_backend_iptables.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 100,
                                    "startColumn": 24,
                                    "endLine": 101,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        if forward:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,\n                                     \"sysctl-forward-yes\"),\n                        sysctl)\n        else:\n            shutil.copy(os.path.join(ufw.common.iptables_dir,\n                                     \"sysctl-forward-no\"),\n                        sysctl)\n\n    def _test__do_checks(self):\n        '''Test _do_checks()'''\n        print(\"  setting self.backend.do_checks to 'True'\")"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 412,
                                    "startColumn": 11,
                                    "endLine": 412,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    try:\n        pid = int(mypid)\n    except Exception:\n        raise ValueError(\"pid must be an integer\")\n\n    name = os.path.join(\"/proc\", str(pid), \"stat\")\n    if not os.path.isfile(name):\n        raise IOError(\"Couldn't find '%s'\" % (name))\n\n    # LP: #1101304\n    # 9983 (cmd) S 923 ..."
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 47,
                                    "startColumn": 12,
                                    "endLine": 47,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    return False\n\n\ndef recursive_rm(dirPath, contents_only=False):\n    '''recursively remove directory'''\n    names = os.listdir(dirPath)\n    for name in names:\n        path = os.path.join(dirPath, name)\n        if os.path.islink(path) or not os.path.isdir(path):\n            os.unlink(path)\n        else:"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 140,
                                    "startColumn": 22,
                                    "endLine": 140,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "        statedir = real_statedir\n        if self.root != None:\n            statedir = self.root + real_statedir\n        self.mkpath(statedir)\n\n        init_helper = os.path.join(statedir, 'ufw-init')\n        init_helper_functions = os.path.join(statedir, 'ufw-init-functions')\n        self.copy_file('src/ufw-init', init_helper)\n        self.copy_file('src/ufw-init-functions', init_helper_functions)\n\n        # Install translations"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/tests/unit/support.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 394,
                                    "startColumn": 15,
                                    "endLine": 394,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\ndef has_proc_net_output():\n    '''Determine if /proc/net/tcp|udp[6] have useful information'''\n    found = False\n    for p in ['tcp', 'udp', 'tcp', 'tcp6']:\n        path = os.path.join(\"/proc/net\", p)\n        if not os.path.exists(p):\n            continue\n        with open(p) as f:\n            if len(f.readlines()) > 1:  # account for header\n                found = True"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/setup.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 259,
                                    "startColumn": 30,
                                    "endLine": 259,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "    # to /usr/sbin with no symlink in /sbin except on upgrades. To accomodate\n    # buildds that may still have the old iptables, search /usr/sbin first\n    for dir in ['/usr/sbin', '/sbin', '/usr/bin', '/bin', '/usr/local/sbin', \\\n                '/usr/local/bin']:\n        if e == \"iptables\":\n            if os.path.exists(os.path.join(dir, e)):\n                iptables_dir = dir\n                iptables_exe = os.path.join(iptables_dir, \"iptables\")\n                print(\"Found '%s'\" % iptables_exe)\n            else:\n                continue"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 982,
                                    "startColumn": 9,
                                    "endLine": 982,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "                        'state': 3,\n                        'uid': 7,\n                        'inode': 9\n                      }\n\n    fn = os.path.join(\"/proc/net\", protocol)\n    # can't test for this\n    if not os.access(fn, os.F_OK | os.R_OK): # pragma: no cover\n        raise ValueError\n\n    lst = []"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 2
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                },
                {
                    "ruleId": "PYTHON_BAD_FUNCTION",
                    "ruleIndex": -1,
                    "kind": "fail",
                    "level": "warning",
                    "message": {
                        "text": "Obsolete or unsafe function",
                        "arguments": []
                    },
                    "locations": [
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-ilev.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 776,
                                    "startColumn": 13,
                                    "endLine": 776,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    # Use a unique chain name (with our locking code, this shouldn't be\n    # needed, but this is a cheap safeguard in case the chain happens to\n    # still be lying around. We do this to avoid a separate call to\n    # iptables to check for existence)\n    chain += mktemp(prefix='', dir='')\n\n    # First install a test chain\n    (rc, out) = cmd([exe, '-N', chain])\n    if rc != 0:\n        raise OSError(errno.ENOENT, out) # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/.pc/rbt-astralabel-detect.patch/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 776,
                                    "startColumn": 13,
                                    "endLine": 776,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    # Use a unique chain name (with our locking code, this shouldn't be\n    # needed, but this is a cheap safeguard in case the chain happens to\n    # still be lying around. We do this to avoid a separate call to\n    # iptables to check for existence)\n    chain += mktemp(prefix='', dir='')\n\n    # First install a test chain\n    (rc, out) = cmd([exe, '-N', chain])\n    if rc != 0:\n        raise OSError(errno.ENOENT, out) # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        },
                        {
                            "id": -1,
                            "physicalLocation": {
                                "artifactLocation": {
                                    "uri": "ufw-0.36.2/src/util.py",
                                    "index": -1
                                },
                                "region": {
                                    "startLine": 776,
                                    "startColumn": 13,
                                    "endLine": 776,
                                    "charOffset": -1,
                                    "byteOffset": -1,
                                    "snippet": {
                                        "text": "\n    # Use a unique chain name (with our locking code, this shouldn't be\n    # needed, but this is a cheap safeguard in case the chain happens to\n    # still be lying around. We do this to avoid a separate call to\n    # iptables to check for existence)\n    chain += mktemp(prefix='', dir='')\n\n    # First install a test chain\n    (rc, out) = cmd([exe, '-N', chain])\n    if rc != 0:\n        raise OSError(errno.ENOENT, out) # pragma: no cover"
                                    }
                                }
                            },
                            "logicalLocations": [],
                            "annotations": [],
                            "relationships": [],
                            "properties": {
                                "tags": [],
                                "x-severity": 1
                            }
                        }
                    ],
                    "stacks": [],
                    "codeFlows": [],
                    "graphs": [],
                    "graphTraversals": [],
                    "relatedLocations": [],
                    "suppressions": [],
                    "rank": -1.0,
                    "attachments": [],
                    "workItemUris": [],
                    "fixes": [],
                    "taxa": []
                }
            ],
            "runAggregates": [],
            "redactionTokens": [],
            "newlineSequences": [
                "\r\n",
                "\n"
            ],
            "threadFlowLocations": [],
            "taxonomies": [],
            "addresses": [],
            "translations": [],
            "policies": [],
            "webRequests": [],
            "webResponses": []
        }
    ],
    "inlineExternalProperties": [],
    "properties": {
        "tags": [],
        "rulesVersion": "3.13.0.99861.d2cd4c1e"
    }
}